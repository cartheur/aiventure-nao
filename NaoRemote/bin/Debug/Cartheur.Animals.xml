<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cartheur.Animals</name>
    </assembly>
    <members>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Bot">
            <summary>
            An element called bot, which may be considered a restricted version of get, is used to tell the interpreter that it should substitute the contents of a "bot predicate". The value of a bot predicate is set at load-time, and cannot be changed at run-time. The interpreter may decide how to set the values of bot predicate at load-time. If the bot predicate has no value defined, the interpreter should substitute an empty string. The bot element has a required name attribute that identifies the bot predicate. 
            
            The bot element does not have any content. 
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Bot.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Bot"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Bot.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Condition">
             <summary>
             The condition element instructs the interpreter to return specified contents depending 
             upon the results of matching a predicate against a pattern. 
             
             NB: The condition element has three different types. The three different types specified 
             here are distinguished by an xsi:type attribute, which permits a validating XML Schema 
             processor to validate them. Two of the types may contain li elements, of which there are 
             three different types, whose validity is determined by the type of enclosing condition. In 
             practice, an interpreter may allow the omission of the xsi:type attribute and may instead 
             heuristically determine which type of condition (and hence li) is in use. 
             
             Block Condition 
             ---------------
             
             The blockCondition type of condition has a required attribute "name", which specifies a 
             predicate, and a required attribute "value", which contains a simple pattern expression. 
            
             If the contents of the value attribute match the value of the predicate specified by name, then 
             the interpreter should return the contents of the condition. If not, the empty string "" 
             should be returned.
             
             Single-predicate Condition 
             --------------------------
             
             The singlePredicateCondition type of condition has a required attribute "name", which specifies 
             a predicate. This form of condition must contain at least one li element. Zero or more of 
             these li elements may be of the valueOnlyListItem type. Zero or one of these li elements may be 
             of the defaultListItem type.
             
             The singlePredicateCondition type of condition is processed as follows: 
            
             Reading each contained li in order: 
            
             1. If the li is a valueOnlyListItem type, then compare the contents of the value attribute of 
             the li with the value of the predicate specified by the name attribute of the enclosing 
             condition. 
                 a. If they match, then return the contents of the li and stop processing this condition. 
                 b. If they do not match, continue processing the condition. 
             2. If the li is a defaultListItem type, then return the contents of the li and stop processing
             this condition.
             
             Multi-predicate Condition 
             -------------------------
             
             The multiPredicateCondition type of condition has no attributes. This form of condition must 
             contain at least one li element. Zero or more of these li elements may be of the 
             nameValueListItem type. Zero or one of these li elements may be of the defaultListItem type.
             
             The multiPredicateCondition type of condition is processed as follows: 
            
             Reading each contained li in order: 
            
             1. If the li is a nameValueListItem type, then compare the contents of the value attribute of 
             the li with the value of the predicate specified by the name attribute of the li. 
                 a. If they match, then return the contents of the li and stop processing this condition. 
                 b. If they do not match, continue processing the condition. 
             2. If the li is a defaultListItem type, then return the contents of the li and stop processing 
             this condition. 
             
             ****************
             
             Condition List Items
             
             As described above, two types of condition may contain li elements. There are three types of 
             li elements. The type of li element allowed in a given condition depends upon the type of that 
             condition, as described above. 
             
             Default List Items 
             ------------------
             
             An li element of the type defaultListItem has no attributes. It may contain any template elements. 
            
             Value-only List Items
             ---------------------
             
             An li element of the type valueOnlyListItem has a required attribute value, which must contain 
             a simple pattern expression. The element may contain any template elements.
             
             Name and Value List Items
             -------------------------
             
             An li element of the type nameValueListItem has a required attribute name, which specifies a 
             predicate, and a required attribute value, which contains a simple pattern expression. The 
             element may contain any template elements. 
             </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Condition.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Condition"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Condition.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Date">
            <summary>
            The date element tells the interpreter that it should substitute the system local date and time. No formatting constraints on the output are specified.
            
            The date element does not have any content. 
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Date.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Date"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Date.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Formal">
            <summary>
            The formal element tells the interpreter to render the contents of the element 
            such that the first letter of each word is in uppercase, as defined (if defined) by 
            the locale indicated by the specified language (if specified). This is similar to methods 
            that are sometimes called "Title Case". 
            
            If no character in this string has a different uppercase version, based on the Unicode 
            standard, then the original string is returned.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Formal.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Formal"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Formal.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Gender">
             <summary>
             The atomic version of the gender element is a shortcut for:
             
             <gender><star/></gender> 
            
             The atomic gender does not have any content. Combined with person substitutions.
             
             The non-atomic gender element instructs the interpreter to: 
             
             1. Replace male-gendered words in the result of processing the contents of the gender element 
             with the grammatically-corresponding female-gendered words; and 
             
             2. Replace female-gendered words in the result of processing the contents of the gender element 
             with the grammatically-corresponding male-gendered words. 
             
             The definition of "grammatically-corresponding" is left up to the implementation.
             </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Gender.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Gender"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Gender.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Get">
            <summary>
            The get element tells the interpreter that it should substitute the contents of a predicate, if that predicate has a value defined. If the predicate has no value defined, the interpreter should substitute the empty string "". 
            
            The interpreter implementation may optionally provide a mechanism that allows the author to designate default values for certain predicates (see [9.3.]). 
            
            The get element must not perform any text formatting or other "normalization" on the predicate contents when returning them. 
            
            The get element has a required name attribute that identifies the predicate with a predicate name. 
            
            The get element does not have any content.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Get.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Get"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Get.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Gossip">
            <summary>
            The gossip element instructs the interpreter to capture the result of processing the contents of the gossip elements and to store these contents in a manner left up to the implementation. Most common uses of gossip have been to store captured contents in a separate file. 
            
            The gossip element does not have any attributes. It may contain any template elements.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Gossip.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Gossip"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Gossip.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Id">
            <summary>
            The id element tells the interpreter that it should substitute the user identification. The determination of the user ID is not specified, since it will vary by application. A suggested default return value is "localhost". 
            
            The id element does not have any content.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Id.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Id"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Id.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Input">
            <summary>
            The input element tells the interpreter that it should substitute the contents of a previous user input. 
            
            The template-side input has an optional index attribute that may contain either a single integer or a comma-separated pair of integers. The minimum value for either of the integers in the index is "1". The index tells the interpreter which previous user input should be returned (first dimension), and optionally which "sentence" (see [8.3.2.]) of the previous user input. 
            
            The interpreter should raise an error if either of the specified index dimensions is invalid at run-time. 
            
            An unspecified index is the equivalent of "1,1". An unspecified second dimension of the index is the equivalent of specifying a "1" for the second dimension. 
            
            The input element does not have any content. 
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Input.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Input"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Input.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Learn">
            <summary>
            The learn element instructs the interpreter to retrieve a resource specified by a URI, and to process its aeon object contents.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Learn.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Learn"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Learn.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Lowercase">
            <summary>
            The lowercase element tells the interpreter to render the contents of the element in lowercase, as defined (if defined) by the locale indicated by the specified language (if specified). 
            
            If no character in this string has a different lowercase version, based on the Unicode standard, then the original string is returned. 
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Lowercase.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Lowercase"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Lowercase.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Person">
             <summary>
             The atomic version of the person element is a shortcut for: 
             
             <person><star/></person> 
            
             The atomic person does not have any content. 
             
             The non-atomic person element instructs the interpreter to: 
             
             1. replace words with first-person aspect in the result of processing the contents of the 
             person element with words with the grammatically-corresponding third-person aspect; and 
             
             2. replace words with third-person aspect in the result of processing the contents of the 
             person element with words with the grammatically-corresponding first-person aspect.
             
             The definition of "grammatically-corresponding" is left up to the implementation. 
             
             The definition of "grammatically-corresponding" is left up to the implementation. 
             Historically, implementations of person have dealt with pronouns, likely due to the fact that most code is written in English. However, the decision about whether to transform the person aspect of other words is left up to the implementation.
             </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Person.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Person"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Person.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Person2">
            <summary>
            The atomic version of the person2 element is a shortcut for: 
            
            <person2><star/></person2> 
            
            The atomic person2 does not have any content. Combined with person substitutions.
            
            The non-atomic person2 element instructs the interpreter to: 
            
            1. Replace words with first-person aspect in the result of processing the contents of the 
            person2 element with words with the grammatically-corresponding second-person aspect; and,
            
            2. Replace words with second-person aspect in the result of processing the contents of the 
            person2 element with words with the grammatically-corresponding first-person aspect. 
            
            The definition of "grammatically-corresponding" is left up to the implementation.
            
            The definition of "grammatically-corresponding" is left up to the implementation. 
            Historically, implementations of person2 have dealt with pronouns, likely due to the fact that most code is written in English. However, the decision about whether to transform the person aspect of other words is left up to the implementation.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Person2.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Person2"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Person2.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Piglatin">
            <summary>
            Ranslatestay Englishway ordsway intoway Igpay Atinlay
            </summary>
            <remarks>Translates English words into Pig Latin</remarks>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Piglatin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Piglatin"/> class.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Piglatin.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Random">
            <summary>
            The random element instructs the interpreter to return exactly one of its contained li elements randomly. The random element must contain one or more li elements of type defaultListItem, and cannot contain any other elements.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Random.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Random"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Random.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Script">
            <summary>
            Facilitates the execution of a script from within the runtime.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Script.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Script" /> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Script.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Sentence">
            <summary>
            The sentence element tells the interpreter to render the contents of the element such that the first letter of each sentence is in uppercase, as defined (if defined) by the locale indicated by the specified language (if specified). Sentences are interpreted as strings whose last character is the period or full-stop character .. If the string does not contain a ., then the entire string is treated as a sentence. If no character in this string has a different uppercase version, based on the Unicode standard, then the original string is returned. 
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Sentence.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Sentence"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Sentence.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Set">
            <summary>
            The set element instructs the interpreter to set the value of a predicate to the result of processing the contents of the set element. The set element has a required attribute name, which must be a valid predicate name. If the predicate has not yet been defined, the interpreter should define it in memory. 
            
            The interpreter should, generically, return the result of processing the contents of the set element. The set element must not perform any text formatting or other "normalization" on the predicate contents when returning them. 
            
            The interpreter implementation may optionally provide a mechanism that allows the author to designate certain predicates as "return-name-when-set", which means that a set operation using such a predicate will return the name of the predicate, rather than its captured value. (See [9.2].) 
            
            A set element may contain any template elements.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Set.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Set"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Set.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Size">
            <summary>
            The size element tells the interpreter that it should substitute the number of categories currently loaded. The size element does not have any content. 
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Size.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Size"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Size.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Sr">
            <summary>
            The sr element is a shortcut for: 
            
            <srai><star/></srai> 
            
            The atomic sr does not have any content. 
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Sr.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Sr"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Sr.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Srai">
            <summary>
            The srai element instructs the interpreter to pass the result of processing the contents of the srai element to the matching loop, as if the input had been produced by the user (this includes stepping through the entire input normalization process). The srai element does not have any attributes. It may contain any template elements. 
            
            As with all elements, nested forms should be parsed from inside out, so embedded srais are perfectly acceptable. 
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Srai.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Srai"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Srai.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Star">
            <summary>
            The star element indicates that an interpreter should substitute the value "captured" by a particular wildcard from the pattern-specified portion of the match path when returning the template. 
            
            The star element has an optional integer index attribute that indicates which wildcard to use. The minimum acceptable value for the index is "1" (the first wildcard), and the maximum acceptable value is equal to the number of wildcards in the pattern. 
            
            An interpreter should raise an error if the index attribute of a star specifies a wildcard that does not exist in the category element's pattern. Not specifying the index is the same as specifying an index of "1". 
            
            The star element does not have any content. 
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Star.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Star"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Star.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Test">
            <summary>
            A simple example to provide a template for a custom tag handler.
            
            The recipe is as follows:
            
            1. Create a new library project to contain your custom tag classes. DONE
            2. Add the dll as a reference to your project. DONE
            3. Create a public class with the same name as the tag you wish to handle. DONE
            4. Reference System.Xml and Animals.Utilities. DONE
            5. Add the [CustomTag] attribute to the class. DONE
            6. Create a default constructor that puts something in the "this.inputString" attribute. (This is
            because AeonTagHandler inherits from the TextTransformer class and because of limitations with
            instantiating late bound classes cannot call the "regular" AeonTagHandler constructor that would 
            put the XML node's InnerText into inputString). In any case this.inputString is not used by 
            AeonTagHandlers as they have direct access to the node to be processed (among other things - see below).
            7. Override the ProcessChange() method. This is where the work happens. Nota Bene: It is good 
            practice to check the name of the node being processed and return string.Empty if it doesn't match.
            8. By default the inner XML of the tag is recursively processed before the tag itself is processed. If
            you want the result of the tag to be processed first and then the resulting inner XML then set the
            this.isRecursive boolean flag to false (useful when working with tags similar to random or condition).
            
            When working within ProcessChange you have access to the following useful objects:
            
            this.templateNode - An XmlNode object that represents the tag you're processing
            this.bot - An instance of Bot that represents the bot that is currently processing the input
            this.user - An instance of User that represents the user who originated the current input
            this.query - An instance of SubQuery that represents an individual query against the
            graphmaster. Contains the various wildcard match collections
            this.request - An instance of Request that encapsulates all sorts of useful information about
            the input from the user
            this.result - An instance of Result that encapsulates all sorts of useful information about 
            the output generated by the bot.
            
            Finally to load the dll into your bot call the loadCustomTagHandlers(string pathToDLL) method of the
            Bot object that is your bot. An exception will be raised if you attempt to duplicate tag handling.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Test.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Test"/> class.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Test.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.That">
            <summary>
            The template-side that element indicates that an interpreter should substitute the contents of a previous bot output. 
            
            The template-side that has an optional index attribute that may contain either a single integer or a comma-separated pair of integers. The minimum value for either of the integers in the index is "1". The index tells the interpreter which previous bot output should be returned (first dimension), and optionally which "sentence" (see [8.3.2.]) of the previous bot output (second dimension). 
            
            The interpreter should raise an error if either of the specified index dimensions is invalid at run-time. 
            
            An unspecified index is the equivalent of "1,1". An unspecified second dimension of the index is the equivalent of specifying a "1" for the second dimension. 
            
            The template-side that element does not have any content. 
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.That.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.That"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.That.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.ThatStar">
            <summary>
            The thatstar element tells the interpreter that it should substitute the contents of a wildcard from a pattern-side that element. 
            
            The thatstar element has an optional integer index attribute that indicates which wildcard to use; the minimum acceptable value for the index is "1" (the first wildcard). 
            
            An interpreter should raise an error if the index attribute of a star specifies a wildcard that does not exist in the that element's pattern content. Not specifying the index is the same as specifying an index of "1". 
            
            The thatstar element does not have any content. 
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.ThatStar.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.ThatStar"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.ThatStar.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Think">
            <summary>
            The think element instructs the interpreter to perform all usual processing of its contents, but to not return any value, 
            regardless of whether the contents produce output. The think element has no attributes. It may contain any template elements.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Think.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Think"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Think.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.TopicStar">
            <summary>
            The topicstar element tells the interpreter that it should substitute the contents of a wildcard from the current topic (if the topic contains any wildcards).
            
            The topicstar element has an optional integer index attribute that indicates which wildcard to use; the minimum acceptable value for the index is "1" (the first wildcard). Not specifying the index is the same as specifying an index of "1". 
            
            The topicstar element does not have any content. 
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.TopicStar.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.TopicStar"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.TopicStar.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Uppercase">
            <summary>
            The uppercase element tells the interpreter to render the contents of the element in uppercase, as defined (if defined) by the locale indicated by the specified language if specified).
            
            If no character in this string has a different uppercase version, based on the Unicode standard, then the original string is returned. 
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Uppercase.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Uppercase"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Uppercase.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.AeonTagHandlers.Version">
            <summary>
            The version element tells the interpreter that it should substitute the version number of the interpreter. The version element does not have any content. 
            </summary>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Version.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.AeonTagHandlers.Version"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.AeonTagHandlers.Version.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>
            The resulting processed text.
            </returns>
        </member>
        <member name="T:Cartheur.Animals.Core.Characteristic">
            <summary>
            The area of the brain responsible for processing the data at hand.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Characteristic.Attention">
            <summary>
            The attention characteristic.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Characteristic.Concept">
            <summary>
            The concept characteristic.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Characteristic.Decision">
            <summary>
            The decision characteristic.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Characteristic.Drive">
            <summary>
            The drive characteristic.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Characteristic.Noun">
            <summary>
            The noun characteristic.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Characteristic.Perception">
            <summary>
            The perception characteristic.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Characteristic.Predicate">
            <summary>
            The predicate characteristic.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Characteristic.Sensory">
            <summary>
            The sensory characteristic.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Characteristic.Stimulus">
            <summary>
            The stimulus characteristic.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Characteristic.Verb">
            <summary>
            The verb characteristic.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Core.Aeon">
            <summary>
            The intuitive presence to which the functions and behavior are attached.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Core.Aeon.Language">
            <summary>
            The language the aeon speaks and understands.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.Language.English">
            <summary>
            The English language.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.Language.German">
            <summary>
            The German language.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.Language.French">
            <summary>
            The French language.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.Language.Spanish">
            <summary>
            The Spanish language.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.Language.Italian">
            <summary>
            The Italian language.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.Language.Sal">
            <summary>
            A nonsense language.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.CharacteristicEquation">
            <summary>
            Gets or sets the characteristic equation to govern the aeon's behaviour.
            </summary>
            <value>
            The characteristic equation.
            </value>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon._customTags">
            <summary>
            Holds information about the available custom tag handling classes (if loaded).
            <param>The class name.
                <name>Key</name>
            </param>
            <param>The TagHandler class that provides information about the class.
                <name>Value</name>
            </param>
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon._lateBindingAssemblies">
            <summary>
            Holds references to the assemblies that hold the custom tag handling code.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.NotAcceptingUserInputMessage">
            <summary>
            The message to show if a user tries to use aeon whilst set to not process user input.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.IsAcceptingUserInput">
            <summary>
            Flag to show if aeon is accepting user input.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.Size">
            <summary>
            The number of categories aeon has in her brain.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.TrustCodeFiles">
            <summary>
            If set to false the input from aeon code files will undergo the same normalization process that user input goes through. If true aeon will assume the code structure is correct. Defaults to true.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.MaxThatSize">
            <summary>
            The maximum number of characters a "that" element of a path is allowed to be. Anything above this length will cause "that" to be "*". This is to avoid having the core process huge "that" elements in the path that might have been caused by aeon reporting third party data.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.AloneTime">
            <summary>
            The maximum amount of time the aeon should be left alone before prompting the user (in milliseconds).
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.TimeOut">
            <summary>
            The maximum amount of time a request should take (in milliseconds).
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.TimeOutMessage">
            <summary>
            The message to display in the event of a timeout.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.Locale">
            <summary>
            The locale of aeon as a CultureInfo object.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.Strippers">
            <summary>
            Will match all the illegal characters that might be input by the user.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.AdminEmail">
            <summary>
            The email address to correspond with.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.IsLogging">
            <summary>
            Flag to denote if aeon is logging.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.AeonStartedOn">
            <summary>
            The time when this aeon was started.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.AeonAloneStartedOn">
            <summary>
            The time when the alone time started.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.AeonAloneTimer">
            <summary>
            The timer responsible for knowing when aeon is alone.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.LastLogMessage">
            <summary>
            The last message to be entered into the log (for testing purposes)
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.Persistence">
            <summary>
            Returns the persistence of the aeon (in milliseconds).
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.EmotionUsed">
            <summary>
            Gets or sets a value indicating whether [emotion used].
            </summary>
            <value>
              <c>true</c> if [emotion used]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.PersonalityLoaded">
            <summary>
            Flag to indicate if a personality is loaded.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.AboutMe">
            <summary>
            Gets or sets a value indicating whether [about me].
            </summary>
            <value>
              <c>true</c> if [about me]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.ErrorState">
            <summary>
            Indicates if the aeon is in an error state.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.Splitters">
            <summary>
            The splitters object.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.ThisNode">
            <summary>
            The brain of aeon.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Core.Aeon.LearningMode">
            <summary>
            Determines if learning is active or not.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.LearningMode.True">
            <summary>
            Learning mode is true.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.LearningMode.False">
            <summary>
            Learning mode is false.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.Tidbit">
            <summary>
            Particulate for learning.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.AloneThreshold">
            <summary>
            Gets the alone threshold.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.AeonAloneDuration">
            <summary>
            Computes the alone time duration.
            </summary>
            <returns>The duration.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.IsAlone">
            <summary>
            Determines whether the aeon is alone.
            </summary>
            <returns>If this aeon is feeling alone.</returns>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.Sex">
            <summary>
            The supposed sex of aeon.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.GlobalSettings">
            <summary>
            A dictionary object that looks after all the settings associated with this aeon.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.PersonSubstitutions">
            <summary>
            A dictionary of first to third-person substitutions.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.Substitutions">
            <summary>
            Generic substitutions that take place during the normalization process.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Aeon.DefaultPredicates">
            <summary>
            The default predicates to set up for a user.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.Setup">
            <summary>
            Instantiates the dictionary objects and collections associated with this class.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Core.Aeon" /> class.
            </summary>
            <param name="characteristicEquation">The characteristic equation governing the aeon.</param>
        </member>
        <member name="P:Cartheur.Animals.Core.Aeon.MoodEngineSeedValue">
            <summary>
            Gets the emotion engine seed value.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Core.Aeon.LogMessageDelegate">
            <summary>
            The log message delegate.
            </summary>
        </member>
        <member name="E:Cartheur.Animals.Core.Aeon.WrittenToLog">
            <summary>
            Occurs when [written to log].
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.LoadAeonFromXml(System.Xml.XmlDocument,System.String)">
            <summary>
            Allows aeon to load a new xml version of some aeon xms data.
            </summary>
            <param name="xmlCode">The xml document containing xms.</param>
            <param name="filename">The originator of the xml document.</param>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.LoadSettings(System.String)">
            <summary>
            Loads settings and configuration info from various xml files referenced in the settings file passed in the args. Also generates some default values if such values have not been set by the settings file.
            </summary>
            <param name="configurationPath">Path to the xml configuration file.</param>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.UpdateSetting(System.String,System.String)">
            <summary>
            Updates a settings entry.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.AddSetting(System.String,System.String)">
            <summary>
            Adds an entry to settings.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.LoadSplitters(System.String)">
            <summary>
            Loads splitters for this aeon from the supplied config file (or sets up some appropriate defaults).
            </summary>
            <param name="splittersPath">Path to the splitters configuration file.</param>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.Chat(System.String,System.String)">
            <summary>
            Given some raw input and a unique ID creates a response for a new user.
            </summary>
            <param name="rawInput">the raw input.</param>
            <param name="userGuid">The ID for the user (referenced in the result object).</param>
            <returns>Result to the user.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.Chat(Cartheur.Animals.Core.Request)">
            <summary>
            Given a request containing user input, produces a result from aeon.
            </summary>
            <param name="request">The request from the user.</param>
            <returns>The result to be output to the user.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.ProcessNode(System.Xml.XmlNode,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,Cartheur.Animals.Core.User)">
            <summary>
            Recursively evaluates the template nodes returned from aeon.
            </summary>
            <param name="node">The node to evaluate.</param>
            <param name="query">The query that produced this node.</param>
            <param name="request">The request from the user.</param>
            <param name="result">The result to be sent to the user.</param>
            <param name="user">The user who originated the request.</param>
            <returns>The output string.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.GetBespokeTags(Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Searches the custom tag collection and processes the aeon files if an appropriate tag handler is found.
            </summary>
            <param name="user">The user who originated the request.</param>
            <param name="query">The query that produced this node.</param>
            <param name="request">The request from the user.</param>
            <param name="result">The result to be sent to the user.</param>
            <param name="node">The node to evaluate.</param>
            <returns>The output string.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.SaveToBinaryFile(System.String)">
            <summary>
            Saves the root node (and children) to a binary file.
            </summary>
            <param name="path">the path to the file for saving</param>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.LoadFromBinaryFile(System.String)">
            <summary>
            Loads a dump of the root node (and children) into memory.
            </summary>
            <param name="path">the path to the dump file</param>
        </member>
        <member name="M:Cartheur.Animals.Core.Aeon.LoadCustomTagHandlers(System.String)">
            <summary>
            Loads any custom tag handlers found in the library passed in the argument.
            </summary>
            <param name="pathToLibrary">The path to the library containing the custom tag handling code.</param>
        </member>
        <member name="T:Cartheur.Animals.Core.Amend">
            <summary>
            Class responsible for amending the composite database and grammar repository.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Core.Amend.Operation">
            <summary>
            The kind of amend operation to perform.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Amend.Operation.Add">
            <summary>
            Add something to a field.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Amend.Operation.Delete">
            <summary>
            Delete the entry.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Amend.Operation.Replace">
            <summary>
            Replace a field with a better entry.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.Amend.AmendDatabase(System.String,System.String,Cartheur.Animals.Core.Amend.Operation)">
            <summary>
            Amends the conversational database.
            </summary>
            <param name="incorrect">The incorrect entry.</param>
            <param name="alteration">The alteration to replace it.</param>
            <param name="operation">The operation to perform.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.Core.Amend.AmendGrammar(System.String,System.String,Cartheur.Animals.Core.Amend.Operation)">
            <summary>
            Amends the grammar repository.
            </summary>
            <param name="incorrect">The incorrect entry.</param>
            <param name="alteration">The alteration to replace it.</param>
            <param name="operation">The operation to perform.</param>
            <returns></returns>
        </member>
        <member name="T:Cartheur.Animals.Core.Extensions">
            <summary>
            The class containing the extensions for the application.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.Extensions.HasAppearedBefore(System.String,System.String)">
            <summary>
            Determines if the specified value has occurred previously.
            </summary>
            <param name="value">The value.</param>
            <param name="lastValue">The previous value.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.Core.Extensions.HasAppearedBefore(System.Int32,System.Int32)">
            <summary>
            Determines if the specified value has occurred previously.
            </summary>
            <param name="value">The value.</param>
            <param name="lastValue">The previous value.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.Core.Extensions.IsBetween(System.Int32,System.Int32,System.Int32)">
            <summary>
            Determines whether the specified value is between a minimum-maximum range (inclusive).
            </summary>
            <param name="value">The value.</param>
            <param name="minimum">The minimum.</param>
            <param name="maximum">The maximum.</param>
            <returns>If the value is between a minimum and maximum threshold.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.Extensions.AsXElements(System.Object)">
            <summary>
            Returns the properties of the given object as XElements. Properties with null values are still returned, but as empty elements. Underscores in property names are replaces with hyphens.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.Extensions.AsXAttributes(System.Object)">
            <summary>
            Returns the properties of the given object as XElements.Properties with null values are returned as empty attributes. Underscores in property names are replaces with hyphens.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.Extensions.EncryptFile(System.String,System.String,System.String)">
            <summary>
            Encrypts the file.
            </summary>
            <param name="inputFile">The input file.</param>
            <param name="outputFile">The output file.</param>
            <param name="password">The password for encryption.</param>
            <returns>True if encryption is successful.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.Extensions.DecryptFile(System.String,System.String,System.String)">
            <summary>
            Decrypts the file.
            </summary>
            <param name="inputFile">The input file.</param>
            <param name="outputFile">The output file.</param>
            <param name="password">The password for decryption.</param>
            <returns>True if decryption is successful.</returns>
        </member>
        <member name="T:Cartheur.Animals.Core.MatchState">
            <summary>
            Denotes what part of the input path a node represents. 
            </summary>
            <remarks>
            Used when pushing values represented by wildcards onto collections for the star, thatstar, emotion, and topicstar values.
            </remarks>
        </member>
        <member name="F:Cartheur.Animals.Core.MatchState.UserInput">
            <summary>
            The user input state.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.MatchState.That">
            <summary>
            The that state.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.MatchState.Topic">
            <summary>
            The topic state.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.MatchState.Emotion">
            <summary>
            The emotion state.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Core.Node">
            <summary>
            Encapsulates a node in the brain's tree structure.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Node._children">
            <summary>
            Contains the child nodes of this node.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Node.NumberOfChildNodes">
            <summary>
            The number of direct children (non-recursive) of this node.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Node.Template">
            <summary>
            The template (if any) associated with this node.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Node.Filename">
            <summary>
            The aeon source for the category that defines the template.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Node.Word">
            <summary>
            The word that identifies this node to its parent node.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.Node.AddCategory(System.String,System.String,System.String)">
            <summary>
            Adds a category to the node.
            </summary>
            <param name="trajectory">The path for the category.</param>
            <param name="template">The template to find at the end of the path.</param>
            <param name="filename">The file that was the source of this category.</param>
        </member>
        <member name="M:Cartheur.Animals.Core.Node.Evaluate(System.String,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.MatchState,System.Text.StringBuilder)">
            <summary>
            Navigates this node (and recusively into child nodes) for a match to the path passed as an argument while processing the referenced request.
            </summary>
            <param name="trajectory">The normalized path derived from the user's input.</param>
            <param name="query">The query that this search is for.</param>
            <param name="request">An encapsulation of the request from the user.</param>
            <param name="matchstate">The part of the input path the node represents.</param>
            <param name="wildcard">The contents of the user input absorbed by wildcards "_" and "*".</param>
            <returns>The template to process to generate the output.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.Node.StoreWildCard(System.String,System.Text.StringBuilder)">
            <summary>
            Correctly stores a word in the wildcard slot.
            </summary>
            <param name="word">The word matched by the wildcard.</param>
            <param name="wildcard">The contents of the user input absorbed by wildcards "_" and "*".</param>
        </member>
        <member name="T:Cartheur.Animals.Core.Request">
            <summary>
            Encapsulates information about a request sent to aeon for processing.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Request.RawInput">
            <summary>
            The raw input from the user.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Request.StartedOn">
            <summary>
            The time at which this request was created within the system.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Request.ThisUser">
            <summary>
            The user who made this request.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Request.ThisAeon">
            <summary>
            The aeon to which the request is being made.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Request.UserResult">
            <summary>
            The final result produced by this request.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Request.HasTimedOut">
            <summary>
            Flag to show that the request has timed out.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.Request.#ctor(System.String,Cartheur.Animals.Core.User,Cartheur.Animals.Core.Aeon)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Core.Request"/> class.
            </summary>
            <param name="rawInput">The raw input from the user.</param>
            <param name="thisUser">The user who made the request.</param>
            <param name="thisAeon">The presence for this request.</param>
        </member>
        <member name="T:Cartheur.Animals.Core.Result">
            <summary>
            Encapsulates information about the result of a request to the mind.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Result.ThisAeon">
            <summary>
            The user's aeon that is providing the answer.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Result.ThisUser">
            <summary>
            The user for whom this is a result.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Result.UserRequest">
            <summary>
            The request from the user which contains user input.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Result.NormalizedTrajectories">
            <summary>
            The normalized sentence(s) (paths) fed into the brain.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Result.EquationTrajectory">
            <summary>
            Gets or sets the equation trajectory.
            </summary>
            <value>
            The equation trajectory.
            </value>
        </member>
        <member name="F:Cartheur.Animals.Core.Result.Duration">
            <summary>
            The amount of time the request took to process.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Result.LastMessageTime">
            <summary>
            The last message time.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Result.TrajectoryIndication">
            <summary>
            Something which helps the program evolve as it follows Boagaphish processing.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Result.TrajectoryIndicationValue">
            <summary>
            Gets or sets the trajectory indication value.
            </summary>
            <value>
            The trajectory indication value.
            </value>
        </member>
        <member name="P:Cartheur.Animals.Core.Result.Output">
            <summary>
            The result from the presence including logging and checking.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Result.RawOutput">
            <summary>
            Returns the raw sentences. This method is depreciated.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Result.SubQueries">
            <summary>
            The SubQuery objects processed by the brain which contain the templates that are to be converted into the collection of Sentences.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Result.OutputSentences">
            <summary>
            The individual sentences produced by the brain that form the complete response.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Result.InputSentences">
            <summary>
            The individual sentences that constitute the raw input from the user.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.Result.#ctor(Cartheur.Animals.Core.User,Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.Request,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Core.Result"/> class.
            </summary>
            <param name="thisUser">The user for whom this is a result.</param>
            <param name="aeon">The brain providing the result.</param>
            <param name="userRequest">The request that originated this result.</param>
            <param name="trajectoryEquation">The characteristic equation for the trajectory.</param>
        </member>
        <member name="M:Cartheur.Animals.Core.Result.ToString">
            <summary>
            Returns the raw output from the brain.
            </summary>
            <returns>The raw output from the brain.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.Result.CheckEndsAsSentence(System.String)">
            <summary>
            Checks that the provided sentence ends with a sentence splitter.
            </summary>
            <param name="sentence">The sentence to check.</param>
            <returns>True if ends with an appropriate sentence splitter.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.Result.ReturnIndication">
            <summary>
            Returns the trajectory indication.
            </summary>
            <remarks>Emotive indication in <see cref="T:Cartheur.Animals.Personality.Mood"/>, trajectory indication here.</remarks>
        </member>
        <member name="T:Cartheur.Animals.Core.SettingsDictionary">
            <summary>
            A dictionary for loading, adding, checking, removing, and extracting settings.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.SettingsDictionary._settingsHash">
            <summary>
            Holds a dictionary of settings.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.SettingsDictionary._orderedKeys">
            <summary>
            Contains an ordered collection of all the keys.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.SettingsDictionary.TheAeon">
            <summary>
            The presence this dictionary is associated with.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.SettingsDictionary.Count">
            <summary>
            The number of items in the dictionary.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.SettingsDictionary.DictionaryAsXml">
            <summary>
            An xml representation of the contents of this dictionary.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.SettingsDictionary.#ctor(Cartheur.Animals.Core.Aeon)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Core.SettingsDictionary"/> class.
            </summary>
            <param name="theAeon">Aeon settings dictionary.</param>
        </member>
        <member name="M:Cartheur.Animals.Core.SettingsDictionary.LoadSettings(System.String)">
            <summary>
            Loads settings into the class from the file referenced in pathToSettings. The xml should have a declaration with a root tag with child nodes of the form:
            <item name="name" value="value"/>
            </summary>
            <param name="pathToSettings">The file containing the settings.</param>
        </member>
        <member name="M:Cartheur.Animals.Core.SettingsDictionary.LoadSettings(System.Xml.XmlDocument)">
            <summary>
            Loads settings into the class from the file referenced in pathToSettings. The xml should have a declaration with a root tag with child nodes of the form:
            <item name="name" value="value"/>
            </summary>
            <param name="settingsAsXml">The settings as an xml document.</param>
        </member>
        <member name="M:Cartheur.Animals.Core.SettingsDictionary.AddSetting(System.String,System.String)">
            <summary>
            Adds a setting to the Settings class (accessed via the grabSettings(string name) method.
            </summary>
            <param name="name">The name of the new setting.</param>
            <param name="value">The value associated with this setting.</param>
        </member>
        <member name="M:Cartheur.Animals.Core.SettingsDictionary.RemoveSetting(System.String)">
            <summary>
            Removes a named setting from this class.
            </summary>
            <param name="name">The name of the setting to remove.</param>
        </member>
        <member name="M:Cartheur.Animals.Core.SettingsDictionary.RemoveFromHash(System.String)">
            <summary>
            Removes a named setting from the dictionary.
            </summary>
            <param name="name">The key for the dictionary.</param>
        </member>
        <member name="M:Cartheur.Animals.Core.SettingsDictionary.UpdateSetting(System.String,System.String)">
            <summary>
            Updates the named setting with a new value while retaining the position in the dictionary.
            </summary>
            <param name="name">The name of the setting.</param>
            <param name="value">The new value.</param>
        </member>
        <member name="M:Cartheur.Animals.Core.SettingsDictionary.ClearSettings">
            <summary>
            Clears the dictionary to an empty state.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.SettingsDictionary.GrabSetting(System.String)">
            <summary>
            Returns the value of a setting given the name of the setting.
            </summary>
            <param name="name">The name of the setting whose value is of interest.</param>
            <returns>The value of the setting.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.SettingsDictionary.ContainsSettingCalled(System.String)">
            <summary>
            Checks to see if a setting of a particular name exists.
            </summary>
            <param name="name">The setting name to check.</param>
            <returns>Existential truth value.</returns>
        </member>
        <member name="P:Cartheur.Animals.Core.SettingsDictionary.SettingNames">
            <summary>
            Returns a collection of the names of all the settings defined in the dictionary.
            </summary>
            <returns>A collection of the names of all the settings defined in the dictionary.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.SettingsDictionary.Clone(Cartheur.Animals.Core.SettingsDictionary)">
            <summary>
            Copies the values in the current object into the SettingsDictionary passed as the target.
            </summary>
            <param name="target">The target to recieve the values from this SettingsDictionary.</param>
        </member>
        <member name="T:Cartheur.Animals.Core.SubQuery">
            <summary>
            A container class for holding wildcard matches encountered during a path interrogation.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.SubQuery.Trajectory">
            <summary>
            The trajectory that this query relates to.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.SubQuery.Template">
            <summary>
            The template found from searching the brain with the path .
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.SubQuery.InputStar">
            <summary>
            If the raw input matches a wildcard then this attribute will contain the block of text that the user has inputted that is matched by the wildcard.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.SubQuery.ThatStar">
            <summary>
            If the "that" part of the normalized path contains a wildcard then this attribute will contain the block of text that the user has inputted that is matched by the wildcard.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.SubQuery.TopicStar">
            <summary>
            If the "topic" part of the normalized path contains a wildcard then this attribute will contain the block of text that the user has inputted that is matched by the wildcard.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.SubQuery.EmotionStar">
            <summary>
            The "emotional" part of the normalized path contains a wildcard then this attribute will contain the block of text that the user has inputted that is matched by the wildcard.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.SubQuery.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Core.SubQuery"/> class.
            </summary>
            <param name="trajectory">The trajectory that this query relates to.</param>
        </member>
        <member name="T:Cartheur.Animals.Core.Syntax">
            <summary>
            Commands recognized by aeon to perform an activity outside of its conversational significance.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Syntax.AeonListenCommand">
            <summary>
            The aeon listen command, inclusive trailing space.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Syntax.ListenCommand">
            <summary>
            The listen command using more obvious intonation from the speaker and that cannot be confused with ordinary words.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Syntax.AmendConversationCommand">
            <summary>
            The amend conversation command.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Syntax.ChangeEmotionCommand">
            <summary>
            The change emotion command.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Syntax.StandUpCommand">
            <summary>
            The nao stand up command.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.Syntax.RestPositionCommand">
            <summary>
            The nao rest position command.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.Syntax.CommandReceived">
            <summary>
            Gets or sets a value indicating whether [command received].
            </summary>
            <value>
              <c>true</c> if [command received]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cartheur.Animals.Core.User">
            <summary>
            Encapsulates information and history of a user who has interacted with aeon.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.User.UserAeon">
            <summary>
            The aeon this user is using.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.User.UserName">
            <summary>
            The GUID that identifies this user.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.User.AeonReplies">
            <summary>
            A collection of all the result objects returned to the user in this session.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.User.Topic">
            <summary>
            The value of the "topic" predicate.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.User.Emotion">
            <summary>
            The value of the "emotion" predicate.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Core.User.Predicates">
            <summary>
            The predicates associated with this particular user.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Core.User.LastAeonReply">
            <summary>
            The most recent result to be returned by aeon.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Core.User.#ctor(System.String,Cartheur.Animals.Core.Aeon)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Core.User"/> class.
            </summary>
            <param name="userName">The name of the user.</param>
            <param name="aeon">The aeon the user is connected to.</param>
            <exception cref="T:System.Exception">The UserID cannot be empty.</exception>
        </member>
        <member name="M:Cartheur.Animals.Core.User.GetLastAeonOutput">
            <summary>
            Returns the string to use for the next that part of a subsequent path.
            </summary>
            <returns>The string to use for that.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.User.GetThat">
            <summary>
            Returns the first sentence of the last output from aeon.
            </summary>
            <returns>The first sentence of the last output from aeon.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.User.GetThat(System.Int32)">
            <summary>
            Returns the first sentence of the output n-steps ago from aeon.
            </summary>
            <param name="n">The number of steps back to go.</param>
            <returns>The first sentence of the output n-steps ago from aeon.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.User.GetThat(System.Int32,System.Int32)">
            <summary>
            Returns the sentence numbered by "sentence" of the output n-steps ago from aeon.
            </summary>
            <param name="n">The number of steps back to go.</param>
            <param name="sentence">The sentence number to get.</param>
            <returns>The sentence numbered by "sentence" of the output n-steps ago from aeon.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.User.GetAeonReply">
            <summary>
            Returns the first sentence of the last output from aeon.
            </summary>
            <returns>The first sentence of the last output from aeon.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.User.GetAeonReply(System.Int32)">
            <summary>
            Returns the first sentence from the output from aeon n-steps ago.
            </summary>
            <param name="n">The number of steps back to go.</param>
            <returns>The first sentence from the output from aeon n-steps ago.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.User.GetAeonReply(System.Int32,System.Int32)">
            <summary>
            Returns the identified sentence number from the output from aeon n-steps ago.
            </summary>
            <param name="n">The number of steps back to go.</param>
            <param name="sentence">The sentence number to return.</param>
            <returns>The identified sentence number from the output from aeon n-steps ago.</returns>
        </member>
        <member name="M:Cartheur.Animals.Core.User.AddResult(Cartheur.Animals.Core.Result)">
            <summary>
            Adds the latest result from aeon to the results collection.
            </summary>
            <param name="latestResult">The latest result from aeon.</param>
        </member>
        <member name="T:Cartheur.Animals.Behaviour.Indication">
            <summary>
            The class responsible for engaging the learning algorithm.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Behaviour.Indication.IndicationType">
            <summary>
            The indication type.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Behaviour.Indication.IndicationType.Trajectory">
            <summary>
            The trajectory type.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Behaviour.Indication.IndicationType.Emotive">
            <summary>
            The emotive type.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Behaviour.Indication.Iterations">
            <summary>
            Gets or sets the iterations.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Behaviour.Indication.SigmoidAlpha">
            <summary>
            Gets or sets the sigmoid alpha function.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Behaviour.Indication.WindowSize">
            <summary>
            Gets or sets the size of the window.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Behaviour.Indication.TransferFunction">
            <summary>
            Gets or sets the transfer function.
            </summary>
            <value>
            The transfer function.
            </value>
        </member>
        <member name="P:Cartheur.Animals.Behaviour.Indication.CharacteristicEquation">
            <summary>
            Gets or sets the characteristic equation, which governs aeon's behaviour.
            </summary>
            <value>
            The characteristic equation.
            </value>
        </member>
        <member name="M:Cartheur.Animals.Behaviour.Indication.#ctor(Boagaphish.Numeric.TransferFunction,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Behaviour.Indication"/> class.
            </summary>
            <param name="function">The transfer function to initialize on.</param>
            <param name="characteristicEquation">The characteristic equation governing the indication. Can be empty if this feature is not desired.</param>
        </member>
        <member name="M:Cartheur.Animals.Behaviour.Indication.TrainNetwork(System.String,System.Boolean)">
            <summary>
            Trains the network.
            </summary>
            <param name="outputFileName">Name of the output file.</param>
            <param name="saveAsNetworkFile">if set to <c>true</c> [save as network file].</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.Behaviour.Indication.SearchSolution">
            <summary>
            Searches the appropriate solution for the given inputs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.Behaviour.Indication.TrajectoryPolynomial">
            <summary>
            I think a solution is to cast a characteristic polynomial in the space given by the trajectory, the x-axis in a virtual space.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Behaviour.Indication.EmotivePolynomial">
            <summary>
            I think a solution is to cast a characteristic polynomial in the space given by the emotive, the y-axis in a virtual space.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Features.EmotionalDetection">
            <summary>
            The emotional-detection feature of Cartheur's Animals.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Features.EmotionalDetection.FeaureRestriction">
            <summary>
            Is the use of the feature restricted?
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Features.SelfProgramming">
            <summary>
            The self-programming feature of Cartheur's Animals.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Features.SelfProgramming.FeaureRestriction">
            <summary>
            Is the use of the feature restricted?
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Features.SelfProgramming.DbFileType">
            <summary>
            The xms file type.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Features.SelfProgramming.DbFileType.Category">
            <summary>
            The category file type.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Features.SelfProgramming.DbFileType.Command">
            <summary>
            The command file type.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Features.SelfProgramming.Database">
            <summary>
            The database storage object.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Features.SelfProgramming.Database.XmsFileName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Features.SelfProgramming.Database.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Features.SelfProgramming.Database.Pattern">
            <summary>
            
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Features.SelfProgramming.Database.Template">
            <summary>
            
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Features.SelfProgramming.Database.Srai">
            <summary>
            
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Features.SelfProgramming.Database.Learn">
            <summary>
            
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Features.SelfProgramming.DbCommand">
            <summary>
            The xml command storage object.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Features.SelfProgramming.DbCommand.ParseIdealogue(System.String)">
            <summary>
            The file to be retrieved from the database.
            </summary>
            <param name="fileName">the filename to retrieve.</param>
            <returns>The file as object.</returns>
        </member>
        <member name="M:Cartheur.Animals.Features.SelfProgramming.DbCommand.Save(System.String,Cartheur.Animals.Features.SelfProgramming.DbFileType)">
            <summary>
            Saves the specified file at the path.
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="fileType">Type of the file.</param>
        </member>
        <member name="M:Cartheur.Animals.Features.SelfProgramming.DbCommand.Insert(System.String,System.String,Cartheur.Animals.Features.SelfProgramming.DbFileType)">
            <summary>
            Inserts the specified category identifier.
            </summary>
            <param name="categoryID">The category identifier.</param>
            <param name="categoryName">Name of the category.</param>
            <param name="fileType">Type of the file.</param>
        </member>
        <member name="M:Cartheur.Animals.Features.SelfProgramming.DbCommand.Update(System.String,System.String,Cartheur.Animals.Features.SelfProgramming.DbFileType)">
            <summary>
            Updates the specified category identifier.
            </summary>
            <param name="categoryID">The category identifier.</param>
            <param name="categoryName">Name of the category.</param>
            <param name="fileType">Type of the file.</param>
        </member>
        <member name="M:Cartheur.Animals.Features.SelfProgramming.DbCommand.Delete(System.String,Cartheur.Animals.Features.SelfProgramming.DbFileType)">
            <summary>
            Deletes the specified category identifier.
            </summary>
            <param name="categoryID">The category identifier.</param>
            <param name="fileType">Type of the file.</param>
        </member>
        <member name="M:Cartheur.Animals.Features.SelfProgramming.DbCommand.Select(System.String)">
            <summary>
            Selects the specified category identifier.
            </summary>
            <param name="categoryID">The category identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.Features.SelfProgramming.DbCommand.SelectAll(System.String,Cartheur.Animals.Features.SelfProgramming.DbFileType)">
            <summary>
            Selects all data views.
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="fileType">Type of the file.</param>
            <returns></returns>
        </member>
        <member name="T:Cartheur.Animals.Learning.ExplorationPolicy.BoltzmannExploration">
            <summary>
            Boltzmann distribution exploration policy.
            </summary>
            <remarks><para>The class implements exploration policy base on Boltzmann distribution. Acording to the policy, action <b>a</b> at state <b>s</b> is selected with the next probability:</para>
            <code lang="none">
                              exp( Q( s, a ) / t )
            p( s, a ) = -----------------------------
                         SUM( exp( Q( s, b ) / t ) )
                          b
            </code>
            <para>where <b>Q(s, a)</b> is action's <b>a</b> estimation (usefulness) at state <b>s</b> and
            <b>t</b> is <see cref="P:Cartheur.Animals.Learning.ExplorationPolicy.BoltzmannExploration.TemperatureParameter"/>.</para>
            </remarks> 
        </member>
        <member name="P:Cartheur.Animals.Learning.ExplorationPolicy.BoltzmannExploration.TemperatureParameter">
            <summary>
            Termperature parameter of Boltzmann distribution, > 0.
            </summary>
            <remarks><para>The property sets the balance between exploration and greedy actions. If temperature is low, then the policy tends to be more greedy.</para></remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.ExplorationPolicy.BoltzmannExploration.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Learning.ExplorationPolicy.BoltzmannExploration"/> class.
            </summary>
            <param name="temperatureParameter">Termperature parameter of Boltzmann distribution.</param>
        </member>
        <member name="M:Cartheur.Animals.Learning.ExplorationPolicy.BoltzmannExploration.ChooseAction(System.Double[])">
            <summary>
            Choose an action.
            </summary>
            <param name="actionEstimates">Action estimates.</param>
            <returns>Returns selected action.</returns>
            <remarks>The method chooses an action depending on the provided estimates. The estimates can be any sort of estimate, which values usefulness of the action (expected summary reward, discounted reward, etc).</remarks>
        </member>
        <member name="T:Cartheur.Animals.Learning.ExplorationPolicy.EpsilonGreedyExploration">
            <summary>
            Epsilon greedy exploration policy.
            </summary>
            <remarks><para>The class implements epsilon greedy exploration policy. Acording to the policy, the best action is chosen with probability <b>1-epsilon</b>. Otherwise,
            with probability <b>epsilon</b>, any other action, except the best one, is chosen randomly.</para>
            <para>According to the policy, the epsilon value is known also as exploration rate.</para>
            </remarks>
        </member>
        <member name="P:Cartheur.Animals.Learning.ExplorationPolicy.EpsilonGreedyExploration.ExplorationRate">
            <summary>
            Exploration rate value, [0, 1].
            </summary>
            <remarks><para>The value determines the amount of exploration driven by the policy. If the value is high, then the policy drives more to exploration - choosing random
            action, which excludes the best one. If the value is low, then the policy is more greedy - choosing the beat so far action.
            </para></remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.ExplorationPolicy.EpsilonGreedyExploration.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Learning.ExplorationPolicy.EpsilonGreedyExploration"/> class.
            </summary>
            <param name="explorationRate">Epsilon value (exploration rate).</param>
        </member>
        <member name="M:Cartheur.Animals.Learning.ExplorationPolicy.EpsilonGreedyExploration.ChooseAction(System.Double[])">
            <summary>
            Choose an action.
            </summary>
            <param name="actionEstimates">Action estimates.</param>
            <returns>Returns selected action.</returns>
            <remarks>The method chooses an action depending on the provided estimates. The estimates can be any sort of estimate, which values usefulness of the action (expected summary reward, discounted reward, etc).</remarks>
        </member>
        <member name="T:Cartheur.Animals.Learning.ExplorationPolicy.IExplorationPolicy">
            <summary>
            Exploration policy interface.
            </summary>
            <remarks>The interface describes exploration policies, which are used in reinforcement learning to explore state space.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.ExplorationPolicy.IExplorationPolicy.ChooseAction(System.Double[])">
            <summary>
            Choose an action.
            </summary>
            <param name="actionEstimates">Action estimates.</param>
            <returns>Returns selected action.</returns>
            <remarks>The method chooses an action depending on the provided estimates. The estimates can be any sort of estimate, which values usefulness of the action (expected summary reward, discounted reward, etc).</remarks> 
        </member>
        <member name="T:Cartheur.Animals.Learning.ExplorationPolicy.RouletteWheelExploration">
            <summary>
            Roulette wheel exploration policy.
            </summary>
            <remarks><para>The class implements roulette whell exploration policy. Acording to the policy,
            action <b>a</b> at state <b>s</b> is selected with the next probability:</para>
            <code lang="none">
                              Q( s, a )
            p( s, a ) = ------------------
                         SUM( Q( s, b ) )
                          b
            </code>
            <para>where <b>Q(s, a)</b> is action's <b>a</b> estimation (usefulness) at state <b>s</b>.</para><para><note>The exploration policy may be applied only in cases, when action estimates (usefulness) are represented with positive value greater then 0.</note></para></remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.ExplorationPolicy.RouletteWheelExploration.ChooseAction(System.Double[])">
            <summary>
            Choose an action.
            </summary>
            <param name="actionEstimates">Action estimates.</param>
            <returns>Returns selected action.</returns>
            <remarks>The method chooses an action depending on the provided estimates. The estimates can be any sort of estimate, which values usefulness of the action (expected summary reward, discounted reward, etc).</remarks>
        </member>
        <member name="T:Cartheur.Animals.Learning.ExplorationPolicy.TabuSearchExploration">
            <summary>
            Tabu search exploration policy.
            </summary>
            <remarks>The class implements simple tabu search exploration policy, allowing to set certain actions as tabu for a specified amount of iterations. The actual exploration and choosing from non-tabu actions is done by <see cref="P:Cartheur.Animals.Learning.ExplorationPolicy.TabuSearchExploration.BasePolicy">base exploration policy</see>.</remarks>
        </member>
        <member name="P:Cartheur.Animals.Learning.ExplorationPolicy.TabuSearchExploration.BasePolicy">
            <summary>
            Base exploration policy.
            </summary>
            <remarks>Base exploration policy is the policy, which is used to choose from non-tabu actions.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.ExplorationPolicy.TabuSearchExploration.#ctor(System.Int32,Cartheur.Animals.Learning.ExplorationPolicy.IExplorationPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Learning.ExplorationPolicy.TabuSearchExploration"/> class.
            </summary>
            <param name="actionsCount">Total actions count.</param>
            <param name="baseExplorationPolicy">Base exploration policy.</param>
        </member>
        <member name="M:Cartheur.Animals.Learning.ExplorationPolicy.TabuSearchExploration.ChooseAction(System.Double[])">
            <summary>
            Choose an action.
            </summary>
            <param name="actionEstimates">Action estimates.</param>
            <returns>Returns selected action.</returns>
            <remarks>The method chooses an action depending on the provided estimates. The estimates can be any sort of estimate, which values usefulness of the action (expected summary reward, discounted reward, etc). The action is choosed from non-tabu actions only.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.ExplorationPolicy.TabuSearchExploration.ResetTabuList">
            <summary>
            Reset tabu list.
            </summary>
            <remarks>Clears tabu list making all actions allowed.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.ExplorationPolicy.TabuSearchExploration.SetTabuAction(System.Int32,System.Int32)">
            <summary>
            Set tabu action.
            </summary>
            <param name="action">Action to set tabu for.</param>
            <param name="tabuTime">Tabu time in iterations.</param>
        </member>
        <member name="T:Cartheur.Animals.Learning.LearningTypes">
            <summary>
            The learning type used.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Learning.LearningTypes.QLearning">
            <summary>An off-policy, model-free reinforcement learning technique.</summary>
        </member>
        <member name="F:Cartheur.Animals.Learning.LearningTypes.SarsaAgent">
            <summary>An on-policy, Markov decision process for reinforcement learning.</summary>
        </member>
        <member name="F:Cartheur.Animals.Learning.LearningTypes.SolutionPath">
            <summary>Show the solution found by the learning types.</summary>
        </member>
        <member name="T:Cartheur.Animals.Learning.LearningThreads">
            <summary>
            The class managing the learning threads.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Learning.LearningThreads.LearningWorkerThread">
            <summary>
            The learning worker thread.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Learning.LearningThreads.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Learning.LearningTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Learning.LearningThreads" /> class.
            </summary>
            <param name="learningAeon">The learning aeon.</param>
            <param name="types">The types.</param>
        </member>
        <member name="M:Cartheur.Animals.Learning.LearningThreads.StartLearning">
            <summary>
            Starts the learning algorithm.
            </summary>
            <param name="types">The types.</param>//ToDo: Maybe reintroduce this.
        </member>
        <member name="M:Cartheur.Animals.Learning.LearningThreads.QLearningThread">
            <summary>
            Runs learning on the q-learning object using its agent thread. Off-policy.
            </summary>
            <returns>Learned q-learning object.</returns>
        </member>
        <member name="M:Cartheur.Animals.Learning.LearningThreads.SarsaAgentThread">
            <summary>
            Runs learning on the sarsa-agent object using its agent thread. On policy.
            </summary>
            <returns>Learned sarsa agent object.</returns>
        </member>
        <member name="M:Cartheur.Animals.Learning.LearningThreads.ShowSolution">
            <summary>
            Shows the solution thread.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Learning.LearningThreads.UpdateAgentPosition(System.Int32@,System.Int32@,System.Int32)">
            <summary>
            Update agent position and return reward for the move.
            </summary>
            <param name="currentX">The current x.</param>
            <param name="currentY">The current y.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.Learning.LearningThreads.GetStateNumber(System.Int32,System.Int32)">
            <summary>
            Get state number from agent's receptors in the specified position.
            </summary>
            <param name="x">The x-position.</param>
            <param name="y">The y-position.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.Learning.LearningThreads.ImportMap(System.String,System.String)">
            <summary>
            Imports the learning map into GPU memory.
            </summary>
            <param name="pathToMapFiles">The path to map files.</param>
            <param name="mapName">Name of the map.</param>
        </member>
        <member name="T:Cartheur.Animals.Learning.Maps.CellularWorld">
            <summary>
            The GPU workspace for creating a playground for neurons.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Learning.Maps.CellularWorld.Map">
            <summary>
            An artificial world map.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Learning.Maps.CellularWorld.Coloring">
            <summary>
            An artificial world's coloring.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Learning.Maps.CellularWorld.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Learning.Maps.CellularWorld"/> class.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Learning.Maps.CellularWorld.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the OnPaint event.
            </summary>
            <param name="pe">The <see cref="T:System.Windows.Forms.PaintEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Cartheur.Animals.Learning.Maps.CellularWorld.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Learning.Maps.CellularWorld.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Cartheur.Animals.Learning.Maps.CellularWorld.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Learning.QLearning">
            <summary>
            QLearning learning algorithm.
            </summary>
            <remarks>The class provides implementation of Q-Learning algorithm, known as off-policy temporal difference control.</remarks>
        </member>
        <member name="P:Cartheur.Animals.Learning.QLearning.StatesCount">
            <summary>
            Amount of possible states.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Learning.QLearning.ActionsCount">
            <summary>
            Amount of possible actions.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Learning.QLearning.ExplorationPolicy">
            <summary>
            Exploration policy.
            </summary>
            <remarks>Policy, which is used to select actions.</remarks>
        </member>
        <member name="P:Cartheur.Animals.Learning.QLearning.LearningRate">
            <summary>
            Learning rate, [0, 1].
            </summary>
            <remarks>The value determines the amount of updates Q-function receives during learning. The greater the value, the more updates the function receives. The lower the value, the less updates it receives.</remarks>
        </member>
        <member name="P:Cartheur.Animals.Learning.QLearning.DiscountFactor">
            <summary>
            Discount factor, [0, 1].
            </summary>
            <remarks>Discount factor for the expected summary reward. The value serves as multiplier for the expected reward. So if the value is set to 1, then the expected summary reward is not discounted. If the value is getting smaller, then smaller amount of the expected reward is used for actions' estimates update.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.QLearning.#ctor(System.Int32,System.Int32,Cartheur.Animals.Learning.ExplorationPolicy.IExplorationPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Learning.QLearning"/> class.
            </summary>
            <param name="possibleStates">Amount of possible states.</param>
            <param name="possibleActions">Amount of possible actions.</param>
            <param name="explorationPolicy">Exploration policy.</param>
            <remarks>Action estimates are randomized in the case of this constructor is used.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.QLearning.#ctor(System.Int32,System.Int32,Cartheur.Animals.Learning.ExplorationPolicy.IExplorationPolicy,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Learning.QLearning"/> class.
            </summary>
            <param name="possibleStates">Amount of possible states.</param>
            <param name="possibleActions">Amount of possible actions.</param>
            <param name="explorationPolicy">Exploration policy.</param>
            <param name="randomize">Randomize action estimates or not.</param>
            <remarks>The <b>randomize</b> parameter specifies if initial action estimates should be randomized with small values or not. Randomization of action values may be useful, when greedy exploration policies are used. In this case randomization ensures that actions of the same type are not chosen always.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.QLearning.GetAction(System.Int32)">
            <summary>
            Get next action from the specified state.
            </summary>
            <param name="state">Current state to get an action for.</param>
            <returns>Returns the action for the state.</returns>
            <remarks>The method returns an action according to current <see cref="P:Cartheur.Animals.Learning.QLearning.ExplorationPolicy">exploration policy</see>.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.QLearning.UpdateState(System.Int32,System.Int32,System.Double,System.Int32)">
            <summary>
            Update Q-function's value for the previous state-action pair.
            </summary>
            <param name="previousState">Previous state.</param>
            <param name="action">Action, which leads from previous to the next state.</param>
            <param name="reward">Reward value, received by taking specified action from previous state.</param>
            <param name="nextState">Next state.</param>
        </member>
        <member name="T:Cartheur.Animals.Learning.SarsaAgent">
            <summary>
            Sarsa agent.
            </summary>
            <remarks>The class provides implementation of Sarsa agent, known as on-policy temporal difference control.</remarks>
        </member>
        <member name="P:Cartheur.Animals.Learning.SarsaAgent.StatesCount">
            <summary>
            Amount of possible states.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Learning.SarsaAgent.ActionsCount">
            <summary>
            Amount of possible actions.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Learning.SarsaAgent.ExplorationPolicy">
            <summary>
            Exploration policy.
            </summary>
            <remarks>Policy, which is used to select actions.</remarks>
        </member>
        <member name="P:Cartheur.Animals.Learning.SarsaAgent.LearningRate">
            <summary>
            Learning rate, [0, 1].
            </summary>
            <remarks>The value determines the amount of updates Q-function receives during learning. The greater the value, the more updates the function receives. The lower the value, the less updates it receives.</remarks>
        </member>
        <member name="P:Cartheur.Animals.Learning.SarsaAgent.DiscountFactor">
            <summary>
            Discount factor, [0, 1].
            </summary>
            <remarks>Discount factor for the expected summary reward. The value serves as multiplier for the expected reward. So if the value is set to 1, then the expected summary reward is not discounted. If the value is getting smaller, then smaller amount of the expected reward is used for actions' estimates update.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.SarsaAgent.#ctor(System.Int32,System.Int32,Cartheur.Animals.Learning.ExplorationPolicy.IExplorationPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Learning.SarsaAgent"/> class.
            </summary>
            <param name="possibleStates">Amount of possible states.</param>
            <param name="possibleActions">Amount of possible actions.</param>
            <param name="explorationPolicy">Exploration policy.</param>
            <remarks>Action estimates are randomized in the case of this constructor is used.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.SarsaAgent.#ctor(System.Int32,System.Int32,Cartheur.Animals.Learning.ExplorationPolicy.IExplorationPolicy,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Learning.SarsaAgent"/> class.
            </summary>
            <param name="possibleStates">Amount of possible states.</param>
            <param name="possibleActions">Amount of possible actions.</param>
            <param name="explorationPolicy">Exploration policy.</param>
            <param name="randomize">Randomize action estimates or not.</param>
            <remarks>The <b>randomize</b> parameter specifies if initial action estimates should be randomized with small values or not. Randomization of action values may be useful, when greedy exploration policies are used. In this case randomization ensures that actions of the same type are not chosen always.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.SarsaAgent.GetAction(System.Int32)">
            <summary>
            Get next action from the specified state.
            </summary>
            <param name="state">Current state to get an action for.</param>
            <returns>Returns the action for the state.</returns>
            <remarks>The method returns an action according to current <see cref="P:Cartheur.Animals.Learning.SarsaAgent.ExplorationPolicy">exploration policy</see>.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.SarsaAgent.UpdateState(System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
            Update Q-function's value for the previous state-action pair.
            </summary>
            <param name="previousState">Curren state.</param>
            <param name="previousAction">Action, which lead from previous to the next state.</param>
            <param name="reward">Reward value, received by taking specified action from previous state.</param>
            <param name="nextState">Next state.</param>
            <param name="nextAction">Next action.</param>
            <remarks>Updates Q-function's value for the previous state-action pair in the case if the next state is non terminal.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Learning.SarsaAgent.UpdateState(System.Int32,System.Int32,System.Double)">
            <summary>
            Update Q-function's value for the previous state-action pair.
            </summary>
            <param name="previousState">Curren state.</param>
            <param name="previousAction">Action, which lead from previous to the next state.</param>
            <param name="reward">Reward value, received by taking specified action from previous state.</param>
            <remarks>Updates Q-function's value for the previous state-action pair in the case if the next state is terminal.</remarks>
        </member>
        <member name="T:Cartheur.Animals.Normalize.ApplySubstitutions">
            <summary>
            Checks the text for any matches in the bot's substitutions dictionary and makes any appropriate changes.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Normalize.ApplySubstitutions.#ctor(Cartheur.Animals.Core.Aeon,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Normalize.ApplySubstitutions"/> class.
            </summary>
            <param name="aeon">The aeon this transformer is a part of</param>
            <param name="inputString">The input string to be transformed</param>
        </member>
        <member name="M:Cartheur.Animals.Normalize.ApplySubstitutions.#ctor(Cartheur.Animals.Core.Aeon)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Normalize.ApplySubstitutions"/> class.
            </summary>
            <param name="aeon">The aeon this transformer is a part of</param>
        </member>
        <member name="M:Cartheur.Animals.Normalize.ApplySubstitutions.GetMarker(System.Int32)">
            <summary>
            Gets the marker.
            </summary>
            <param name="len">The length.</param>
        </member>
        <member name="M:Cartheur.Animals.Normalize.ApplySubstitutions.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Normalize.ApplySubstitutions.Substitute(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.SettingsDictionary,System.String)">
            <summary>
            Static helper that applies replacements from the passed dictionary object to the target string.
            </summary>
            <param name="aeon">The aeon for whom this is being processed</param>
            <param name="dictionary">The dictionary containing the substitutions</param>
            <param name="target">the target string to which the substitutions are to be applied</param>
            <returns>The processed string</returns>
        </member>
        <member name="M:Cartheur.Animals.Normalize.ApplySubstitutions.MakeRegexSafe(System.String)">
            <summary>
            Given an input, escapes certain characters so they can be used as part of a regex.
            </summary>
            <param name="input">The raw input</param>
            <returns>the safe version</returns>
        </member>
        <member name="T:Cartheur.Animals.Normalize.MakeCaseInsensitive">
            <summary>
            Normalizes the input text into upper case.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Normalize.MakeCaseInsensitive.#ctor(Cartheur.Animals.Core.Aeon,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Normalize.MakeCaseInsensitive"/> class.
            </summary>
            <param name="aeon">The aeon is this transformer a part of</param>
            <param name="inputString">The input string to be transformed</param>
        </member>
        <member name="M:Cartheur.Animals.Normalize.MakeCaseInsensitive.#ctor(Cartheur.Animals.Core.Aeon)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Normalize.MakeCaseInsensitive"/> class.
            </summary>
            <param name="aeon">The aeon this transformer is a part of</param>
        </member>
        <member name="M:Cartheur.Animals.Normalize.MakeCaseInsensitive.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Normalize.MakeCaseInsensitive.TransformInput(System.String)">
            <summary>
            An ease-of-use static method that re-produces the instance transformation methods.
            </summary>
            <param name="input">The string to transform</param>
            <returns>The resulting string</returns>
        </member>
        <member name="T:Cartheur.Animals.Normalize.SplitIntoSentences">
            <summary>
            Splits the raw input into its constituent sentences. Split using the tokens found in aeon's Splitters string array.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Normalize.SplitIntoSentences._aeon">
            <summary>
            The aeon this sentence splitter is associated with
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Normalize.SplitIntoSentences._inputString">
            <summary>
            The raw input string
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Normalize.SplitIntoSentences.#ctor(Cartheur.Animals.Core.Aeon,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Normalize.SplitIntoSentences"/> class.
            </summary>
            <param name="aeon">The aeon this sentence splitter is associated with</param>
            <param name="inputString">The raw input string to be processed</param>
        </member>
        <member name="M:Cartheur.Animals.Normalize.SplitIntoSentences.#ctor(Cartheur.Animals.Core.Aeon)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Normalize.SplitIntoSentences"/> class.
            </summary>
            <param name="aeon">The aeon this sentence splitter is associated with</param>
        </member>
        <member name="M:Cartheur.Animals.Normalize.SplitIntoSentences.Transform(System.String)">
            <summary>
            Splits the supplied raw input into an array of strings according to the tokens found in aeon's Splitters list.
            </summary>
            <param name="inputString">The raw input to split</param>
            <returns>An array of strings representing the constituent "sentences"</returns>
        </member>
        <member name="M:Cartheur.Animals.Normalize.SplitIntoSentences.Transform">
            <summary>
            Splits the raw input supplied via the constructor into an array of strings according to the tokens found in aeon's Splitters list.
            </summary>
            <returns>An array of strings representing the constituent "sentences"</returns>
        </member>
        <member name="T:Cartheur.Animals.Normalize.StripIllegalCharacters">
            <summary>
            Strips any illegal characters found in the input string. Illegal characters are referenced from aeon's Strippers regex that is defined in the setup XML file.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Normalize.StripIllegalCharacters.#ctor(Cartheur.Animals.Core.Aeon,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Normalize.StripIllegalCharacters"/> class.
            </summary>
            <param name="aeon">The aeon is this transformer a part of</param>
            <param name="inputString">The input string to be transformed</param>
        </member>
        <member name="M:Cartheur.Animals.Normalize.StripIllegalCharacters.#ctor(Cartheur.Animals.Core.Aeon)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Normalize.StripIllegalCharacters"/> class.
            </summary>
            <param name="aeon">The aeon this transformer is a part of</param>
        </member>
        <member name="M:Cartheur.Animals.Normalize.StripIllegalCharacters.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Personality.AeonGender">
            <summary>
            Used to determine the gender of things.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Personality.AeonGender.Unknown">
            <summary>
            Indicates an unknown gender to aeon.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Personality.AeonGender.Female">
            <summary>
            Indicates a female gender to aeon.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Personality.AeonGender.Male">
            <summary>
            Indicates a male gender to aeon.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Personality.MeaningFive">
            <summary>
            Advanced learning and behaviour class.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Personality.MeaningFive.Thats">
            <summary>
            Gets or sets the thats.
            </summary>
            <remarks>Any learning should go through the 'learn' tag. Have removed AeonLearning.cs but kept the constructor logic here.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Personality.MeaningFive.#ctor(Cartheur.Animals.Core.Result)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Personality.MeaningFive"/> class.
            </summary>
            <param name="theMood">The mood.</param>
        </member>
        <member name="T:Cartheur.Animals.Personality.Emotions">
            <summary>
            The set of emotions the aeon can experience.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Personality.HappyFeelings">
            <summary>
            The subset emotions containing happy feelings.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Personality.ConfidentFeelings">
            <summary>
            The subset emotions containing confident feelings.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Personality.EnergizedFeelings">
            <summary>
            The subset emotions containing energized feelings.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Personality.HelpedFeelings">
            <summary>
            The subset emotions containing helped feelings.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Personality.InsecureFeelings">
            <summary>
            The subset emotions containing insecure feelings.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Personality.SadFeelings">
            <summary>
            The subset emotions containing sad feelings.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Personality.HurtFeelings">
            <summary>
            The subset emotions containing hurt feelings.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Personality.TiredFeelings">
            <summary>
            The subset emotions containing tired feelings.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Personality.Mood">
            <summary>
            The class which manifests the mood of the program.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Personality.Mood.ThisAeon">
            <summary>
            The aeon that is experiencing the emotion.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.EquationEmotive">
            <summary>
            Gets or sets the emotive equation.
            </summary>
            <value>
            The equation emotive.
            </value>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.SeedValue">
            <summary>
            Gets or sets the seed value for the mood engine randomizer.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.CurrentMood">
            <summary>
            Gets or sets the current mood of aeon.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.InLove">
            <summary>
            Gets or sets a value indicating whether [in love].
            </summary>
            <value>
              <c>true</c> if [in love]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.IntimateRelationship">
            <summary>
            Gets or sets a value indicating whether [intimate relationship].
            </summary>
            <value>
              <c>true</c> if [intimate relationship]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.FriendlyRelationship">
            <summary>
            Gets or sets a value indicating whether [friendly relationship].
            </summary>
            <value>
              <c>true</c> if [friendly relationship]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.NeutralRelationship">
            <summary>
            Gets or sets a value indicating whether [neutral relationship].
            </summary>
            <value>
              <c>true</c> if [neutral relationship]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.UnfriendlyRelationship">
            <summary>
            Gets or sets a value indicating whether [unfriendly relationship].
            </summary>
            <value>
            <c>true</c> if [unfriendly relationship]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.AffectionDetect">
            <summary>
            Gets or sets a value indicating whether [affection detect].
            </summary>
            <value>
              <c>true</c> if [affection detect]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.EmotiveIndication">
            <summary>
            Gets or sets the emotive indication.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Personality.Mood.Limit">
            <summary>
            The limit of the randomizer.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.Insult">
            <summary>
            Collects points for insult detection.
            </summary>
            <remarks>Emotional variety: the emotional weights.</remarks>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.Dislike">
            <summary>
            Collects points for dislike detection.
            </summary>
            <remarks>Emotional variety: the emotional weights.</remarks>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.Neutral">
            <summary>
            Collects points for neutral detection.
            </summary>
            <remarks>Emotional variety: the emotional weights.</remarks>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.Compliment">
            <summary>
            Collects points for compliment detection.
            </summary>
            <remarks>Emotional variety: the emotional weights.</remarks>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.Love">
            <summary>
            Collects points for love detection.
            </summary>
            <remarks>Emotional variety: the emotional weights.</remarks>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.Annoy">
            <summary>
            Collects points for annoyance detection.
            </summary>
            <remarks>Variety variables for cases of repetition or uncharacteristic input from the user.</remarks>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.Shock">
            <summary>
            Collects points for shocking detection.
            </summary>
            <remarks>Variety variables for cases of repetition or uncharacteristic input from the user.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Personality.Mood.#ctor(System.Int32,Cartheur.Animals.Core.Aeon,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Personality.Mood"/> class. Allows the program to express emotional variety to the user.
            </summary>
            <param name="seedValue">The seed value which controls random emotional expressions. Value should be between 0 and 20.</param>
            <param name="thisAeon">The aeon the emotion is attached to.</param>
            <param name="emotiveEquation">The characteristic equation for the emotive.</param>
            <remarks>This section of code contains what is called the "mood engine". The mood engine is designed, via the <see cref="T:Cartheur.Animals.Utilities.StaticRandom"/> class, that low seed values perpetuate the happy moods, mid-range sadness (insecurity), and upper-range the more anti-social moods.</remarks>
        </member>
        <member name="P:Cartheur.Animals.Personality.Mood.StoreData">
            <summary>
            Gets or sets a value indicating whether [store data] regarding the emotion.
            </summary>
            <value>
              <c>true</c> if [store data]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Cartheur.Animals.Personality.Mood.RelationshipOutcome(System.String)">
            <summary>
            Records the relationship outcome between the aeon and the user.
            </summary>
            <param name="sentence">The sentence being analyzed.</param>
            <remarks>Method used to construct the dataset. This is a file posited to the dataset directory.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Personality.Mood.UpdateMood(Cartheur.Animals.Personality.Emotions)">
            <summary>
            Changes the mood of aeon.
            </summary>
            <param name="mood">The mood resulting from detecting emotional triggers from a that.</param>
            <remarks>What happens at each mood to those parts of the program when it is changed (for some reason)?</remarks>
        </member>
        <member name="M:Cartheur.Animals.Personality.Mood.ChangeMood">
            <summary>
            Changes the mood of the aeon.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Personality.Mood.GetCurrentMood">
            <summary>
            Gets the current mood.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.Personality.Mood.CheckIfInLove">
            <summary>
            Checks if aeon is in love.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Personality.Mood.ReturnIndication">
            <summary>
            Return the emotive indication.
            </summary>
            <remarks>Trajectory indication in <see cref="T:Cartheur.Animals.Core.Result"/>, emotive indication here.</remarks>
        </member>
        <member name="M:Cartheur.Animals.Personality.Mood.EstablishMood">
            <summary>
            Establishes the mood of the aeon.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Utilities.AeonGpio">
            <summary>
            Class responsible for connecting to the motor controller, via the Gpio interface.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.AeonGpio.Debug">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Cartheur.Animals.Utilities.AeonGpio"/> is debug.
            </summary>
            <value>
              <c>true</c> if debug; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cartheur.Animals.Utilities.AeonGpio.PinSets">
            <summary>
            The collection of pinsets for the Chip.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonGpio.PinSets.P0">
            <summary>
            Chip XIO-P0.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonGpio.PinSets.P1">
            <summary>
            Chip XIO-P1.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonGpio.PinSets.P2">
            <summary>
            Chip XIO-P2.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonGpio.PinSets.P3">
            <summary>
            Chip XIO-P3.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonGpio.PinSets.P4">
            <summary>
            Chip XIO-P4.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonGpio.PinSets.P5">
            <summary>
            Chip XIO-P5.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonGpio.PinSets.P6">
            <summary>
            Chip XIO-P6.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonGpio.PinSets.P7">
            <summary>
            Chip XIO-P7.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Utilities.AeonGpio.PinDirection">
            <summary>
            In which direction is the data flowing?
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonGpio.PinDirection.In">
            <summary>
            An inward direction.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonGpio.PinDirection.Out">
            <summary>
            An outward direction.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonGpio.GpioPath">
            <summary>
            The gpio path.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonGpio.OutputPin(Cartheur.Animals.Utilities.AeonGpio.PinSets,System.Boolean)">
            <summary>
            Sets an output on the pin.
            </summary>
            <param name="pin">The pin.</param>
            <param name="value">if set to <c>true</c> [value].</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonGpio.InputPin(Cartheur.Animals.Utilities.AeonGpio.PinSets)">
            <summary>
            Sets an input on the pin.
            </summary>
            <param name="pin">The pin.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonGpio.UnexportPin(Cartheur.Animals.Utilities.AeonGpio.PinSets)">
            <summary>
            Unexports the pin.
            </summary>
            <param name="pin">The pin.</param>
            <remarks>if for any reason you want to unexport a particular pin use this, otherwise just call CleanUpAllPins when you're done</remarks>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonGpio.CleanUpAllPins">
            <summary>
            Cleans up all pins.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Utilities.AeonLoader">
            <summary>
            A class for loading *.aeon files from the file system into the program's architecture that forms an aeon brain.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonLoader.#ctor(Cartheur.Animals.Core.Aeon)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Utilities.AeonLoader"/> class.
            </summary>
            <param name="aeon">The presence whose brain is being processed.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonLoader.LoadAeon(System.String)">
            <summary>
            Loads the *.aeon from files found in the path.
            </summary>
            <param name="path">The path where the aeon code files are.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonLoader.LoadAeonCodeFile(System.String)">
            <summary>
            Given the name of a file in the aeon code path directory, attempts to load it into the program.
            </summary>
            <param name="filename">The name of the file to process.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonLoader.LoadAeonFromXml(System.Xml.XmlDocument,System.String)">
            <summary>
            Given an xml document containing valid aeon code, attempts to load it into the brain.
            </summary>
            <param name="doc">The xml document containing the aeon-formatted code.</param>
            <param name="filename">Where the xml document originated.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonLoader.FindNode(System.String,System.Xml.XmlNode)">
            <summary>
            Given a name will try to find a node named "name" in the childnodes or return null.
            </summary>
            <param name="name">The name of the node.</param>
            <param name="node">The node whose children need searching.</param>
            <returns>The node (or null).</returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonLoader.ProcessTopic(System.Xml.XmlNode,System.String)">
            <summary>
            Given a "topic" node, processes all the categories for the topic and adds them to the brain.
            </summary>
            <param name="node">The "topic" node.</param>
            <param name="filename">The file from which this node is taken.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonLoader.ProcessCategory(System.Xml.XmlNode,System.String)">
            <summary>
            Adds a category to the program's structure using the default topic ("*").
            </summary>
            <param name="node">The xml node containing the category.</param>
            <param name="filename">The file from which this category was taken.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonLoader.ProcessCategory(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Adds a category to the program's structure using the given topic.
            </summary>
            <param name="node">The xml node containing the category.</param>
            <param name="topicName">The topic to be used.</param>
            <param name="filename">The file from which this category was taken.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonLoader.GenerateTrajectory(System.Xml.XmlNode,System.String,System.Boolean)">
            <summary>
            Generates a path from a category xml node and topic name.
            </summary>
            <param name="node">The category xml node.</param>
            <param name="topicName">The topic.</param>
            <param name="isUserInput">Marks the path to be created as originating from user input - so normalize out the * and _ wildcards used by *.aeon.</param>
            <returns>The appropriately processed path.</returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonLoader.GenerateTrajectory(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Generates a path from the passed arguments.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="that">The that.</param>
            <param name="topicName">The topic.</param>
            <param name="isUserInput">Marks the path to be created as originating from user input - so normalize out the * and _ wildcards used by the aeon code.</param>
            <returns>The appropriately processed path.</returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonLoader.GenerateTrajectory(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Generates a path from the passed arguments.
            </summary>
            <param name="pattern">The pattern.</param>
            <param name="that">The that.</param>
            <param name="topicName">The topic.</param>
            <param name="emotion">The emotion of aeon.</param>
            <param name="isUserInput">Marks the path to be created as originating from user input - so normalize out the * and _ wildcards used by the aeon code.</param>
            <returns>The appropriately processed path.</returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonLoader.Normalize(System.String,System.Boolean)">
            <summary>
            Given an input, provide a normalized output.
            </summary>
            <param name="input">The string to be normalized.</param>
            <param name="isUserInput">True if the string being normalized is part of the user input path - flags that we need to normalize out * and _ chars.</param>
            <returns>The normalized string.</returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonLoader.DoFileDecrypt(System.String)">
            <summary>
            Does the file decrypt.
            </summary>
            <param name="path">The path where the file should be stored.</param>
        </member>
        <member name="T:Cartheur.Animals.Utilities.AeonTagHandler">
            <summary>
            The template for all classes that handle the <aeon/> tags found within template nodes of a category.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonTagHandler.#ctor(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Core.User,Cartheur.Animals.Core.SubQuery,Cartheur.Animals.Core.Request,Cartheur.Animals.Core.Result,System.Xml.XmlNode)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Utilities.AeonTagHandler"/> class.
            </summary>
            <param name="aeon">The aeon involved in this request.</param>
            <param name="thisUser">The user making the request.</param>
            <param name="query">The query that originated this node.</param>
            <param name="userRequest">The request sent by the user.</param>
            <param name="userResult">The result to be sent back to the user.</param>
            <param name="templateNode">The node to be processed.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonTagHandler.#ctor">
            <summary>
            Default to use when late-binding.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonTagHandler.IsRecursive">
            <summary>
            A flag to denote if inner tags are to be processed recursively before processing this tag.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonTagHandler.ThisUser">
            <summary>
            A representation of the user making the request.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonTagHandler.Query">
            <summary>
            The query that produced this node containing the wildcard matches.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonTagHandler.UserRequest">
            <summary>
            A representation of the input made by the user.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonTagHandler.UserResult">
            <summary>
            A representation of the result to be returned to the user.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.AeonTagHandler.TemplateNode">
            <summary>
            The template node to be processed by the class.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.AeonTagHandler.GetNode(System.String)">
            <summary>
            Helper method that turns the passed string into an xml node.
            </summary>
            <param name="outerXml">The string to xmlize.</param>
            <returns>The xml node.</returns>
        </member>
        <member name="T:Cartheur.Animals.Utilities.Base64Tool">
            <summary>
            An encryption/decryption activity for aeon source files.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.Base64Tool.Encode(System.String)">
            <summary>
            Performs a Base64 encode.
            </summary>
            <param name="plainText">The plain text.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.Base64Tool.Decode(System.String)">
            <summary>
            Performs a Base64 decode.
            </summary>
            <param name="base64EncodedData">The Base64 encoded data.</param>
            <returns></returns>
        </member>
        <member name="T:Cartheur.Animals.Utilities.Cryptography">
            <summary>
            Class to encrypt and decrypt files.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.Cryptography.Key">
            <summary>
            Gets or sets the key.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.Cryptography.EncryptFile(System.String,System.String,System.String)">
            <summary>
            Encrypts the file.
            </summary>
            <param name="inputFile">The input file.</param>
            <param name="outputFile">The output file.</param>
            <param name="password">The password.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.Cryptography.DecryptFile(System.String,System.String,System.String)">
            <summary>
            Decrypts the file.
            </summary>
            <param name="inputFile">The input file.</param>
            <param name="outputFile">The output file.</param>
            <param name="password">The password.</param>
        </member>
        <member name="T:Cartheur.Animals.Utilities.CustomTagAttribute">
            <summary>
            A custom attribute to be applied to all custom tags in external late-binding libraries.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Utilities.TupleTwo`2">
            <summary>
            A two tuple.
            </summary>
            <typeparam name="T1">The type of one.</typeparam>
            <typeparam name="T2">The type of two.</typeparam>
        </member>
        <member name="M:Cartheur.Animals.Utilities.TupleTwo`2.Add(`0,`1)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="item2">The item2.</param>
        </member>
        <member name="T:Cartheur.Animals.Utilities.TupleTwee`3">
            <summary>
            A three tuple.
            </summary>
            <typeparam name="T1">The type of one.</typeparam>
            <typeparam name="T2">The type of two.</typeparam>
            <typeparam name="T3">The type of three.</typeparam>
        </member>
        <member name="M:Cartheur.Animals.Utilities.TupleTwee`3.Add(`0,`1,`2)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
        </member>
        <member name="T:Cartheur.Animals.Utilities.TupleQuad`4">
            <summary>
            
            </summary>
            <typeparam name="T1">The type of one.</typeparam>
            <typeparam name="T2">The type of two.</typeparam>
            <typeparam name="T3">The type of three.</typeparam>
            <typeparam name="T4">The type of four.</typeparam>
        </member>
        <member name="M:Cartheur.Animals.Utilities.TupleQuad`4.Add(`0,`1,`2,`3)">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
            <param name="item2">The item2.</param>
            <param name="item3">The item3.</param>
            <param name="item4">The item4.</param>
        </member>
        <member name="T:Cartheur.Animals.Utilities.DataOperations">
            <summary>
            The class containing the data operations.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.DataOperations.ThisAeon">
            <summary>
            Gets or sets this aeon the operations apply to.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.DataOperations.FreqeuncyWordDictionary">
            <summary>
            Gets or sets the freqeuncy word dictionary.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.DataOperations.RelationshipList">
            <summary>
            Gets or sets the relationship list.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.DataOperations.ItemMeansSentence">
            <summary>
            Gets or sets the item means sentence.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.DataOperations.SentenceWeightSingle">
            <summary>
            Gets or sets the sentence weight single.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.DataOperations.SentenceWeightDuo">
            <summary>
            Gets or sets the sentence weight duo.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.DataOperations.SentenceWeightTriple">
            <summary>
            Gets or sets the sentence weight triple.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.DataOperations.SentenceWeightFour">
            <summary>
            Gets or sets the sentence weight four.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.DataOperations.CompileTrainingSet(System.Text.StringBuilder)">
            <summary>
            Compiles the training set.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.DataOperations.StoreTrainingSet(Cartheur.Animals.Core.Aeon)">
            <summary>
            Stores the training set.
            </summary>
            <param name="thisAeon">The this aeon.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.DataOperations.CreateTrainingData(System.String)">
            <summary>
            Creates the training data.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Utilities.ProbabilityUtilities">
            <summary>
            The extension class for probability utilities.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.ProbabilityUtilities.GetZipf">
            <summary>
            Gets the zipf function and returns the value following processing.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Utilities.LoaderPaths">
            <summary>
            Sets the paths for the files given the configuration, either debug or release.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.LoaderPaths.ActiveRuntime">
            <summary>
            The active configuration for the application runtume.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.LoaderPaths.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Utilities.LoaderPaths"/> class with a build configuration.
            </summary>
            <param name="configuration">The active runtime configuration.</param>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToNucode">
            <summary>
            Gets the path to the nucode file area.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToXms">
            <summary>
            Gets the path to xms file storage.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToFriendlyPersonality">
            <summary>
            Gets the path to the friendly personality.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToPlayPersonality">
            <summary>
            Gets the path to the play personality.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToDefaultPersonality">
            <summary>
            Gets the path to the default personality.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToToyPersonality">
            <summary>
            Gets the path to the toy personality.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToAeonAssist">
            <summary>
            Gets the path to the aeon-assist personality.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToReductions">
            <summary>
            Gets the path to reductions.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToMindpixel">
            <summary>
            Gets the path to mindpixel.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToUpdate">
            <summary>
            Gets the path to update.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToConfigFiles">
            <summary>
            Gets the path to configuration files.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToLibraries">
            <summary>
            Gets the path to extra compiled libraries.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToSettings">
            <summary>
            Gets the path to the settings.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToFragments">
            <summary>
            Gets the path to extra file fragments.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToLearningMap">
            <summary>
            Gets the path to learning map.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToEncryptedFiles">
            <summary>
            Gets the path to encrypted files.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToBlankFile">
            <summary>
            Gets the path to the blank file.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToScripts">
            <summary>
            Gets the path to the python or lua script files.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.LoaderPaths.PathToLanguageModel">
            <summary>
            Gets the path to the language processing model files.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Utilities.Logging">
            <summary>
            The class which performs logging for the library. Originated in MacOS 9.0.4 (via CodeWarrior in SheepShaver, September - December 2014).
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.Logging.LogModelName">
            <summary>
            Default logging and transcripting if the setting is left blank in the config file.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.Logging.ActiveConfiguration">
            <summary>
            The active configuration of the application.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.Logging.LogModelFile">
            <summary>
            The type of model to use for logging.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.Logging.TranscriptModelFile">
            <summary>
            The type of model to use for the transcript.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.Logging.TestExecution">
            <summary>
            Whether or not running tests.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.Logging.TestingPath">
            <summary>
            The path for logging and transcripting when testing.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.Logging.FilePath">
            <summary>
            The file path for executing assemblies. Set <see cref="P:Cartheur.Animals.Utilities.Logging.TestExecution"/> to true and indicate the <see cref="P:Cartheur.Animals.Utilities.Logging.TestingPath"/>. Set the active configuration parameter first.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Utilities.Logging.LogType">
            <summary>
            The type of log to write.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogType.Information">
            <summary>
            The informational log.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogType.Error">
            <summary>
            The error log.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogType.Gossip">
            <summary>
            The gossip log.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogType.Temporal">
            <summary>
            The temporal log.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogType.Warning">
            <summary>
            The warning log.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Utilities.Logging.LogCaller">
            <summary>
            The classes within the interpreter calling the log.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Aeon">
            <summary>
            The aeon.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.AeonRuntime">
            <summary>
            The aeon runtime application.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.AeonLoader">
            <summary>
            The aeon loader.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Booth">
            <summary>
            The booth runtime aeon application.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Bot">
            <summary>
            The bot.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.ConversationalAeonApplication">
            <summary>
            The conversational aeon application.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Cognizance">
            <summary>
            The cognizance ideal.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Condition">
            <summary>
            The conditional manager.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Cryptography">
            <summary>
            The cryptography engine.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Demo">
            <summary>
            The onstage demo aeon application.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.EmotiveDisplay">
            <summary>
            The emotive display.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.ExternalBear">
            <summary>
            The external bear connection (puppeteering).
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.ExternalRobotConnection">
            <summary>
            The external robot connection (puppeteering).
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.FileTemplate">
            <summary>
            The file template.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Get">
            <summary>
            The get.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Gossip">
            <summary>
            The gossip.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Input">
            <summary>
            The input.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Interaction">
            <summary>
            The interaction.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Indications">
            <summary>
            The indications.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Learn">
            <summary>
            The learn.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.LearningThread">
            <summary>
            The learning thread.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Me">
            <summary>
            M.E.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.MonoRuntime">
            <summary>
            The mono runtime.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Mood">
            <summary>
            The mood.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.NaoVoicingApplication">
            <summary>
            The nao voicing application.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Node">
            <summary>
            The node.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.NonEmotiveAeon">
            <summary>
            The non emotive aeon.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.RobotDialogue">
            <summary>
            The robot dialogue.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Result">
            <summary>
            The result.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Script">
            <summary>
            The script.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Set">
            <summary>
            The set.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.SharedFunction">
            <summary>
            The shared function.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.SpeechRecognizer">
            <summary>
            The speech recognizer.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Star">
            <summary>
            The star lexicon.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.TestFramework">
            <summary>
            The test framework.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.That">
            <summary>
            The that lexicon.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.ThatStar">
            <summary>
            The that star lexicon.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Think">
            <summary>
            The think.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.TopicStar">
            <summary>
            The topic star lexicon.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LogCaller.Xms">
            <summary>
            The XMS.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.Logging.LastMessage">
            <summary>
            The last message passed to logging.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Utilities.Logging.LoggingDelegate">
            <summary>
            The delegate for returning the last log message to the calling application.
            </summary>
        </member>
        <member name="E:Cartheur.Animals.Utilities.Logging.ReturnedToConsole">
            <summary>
            Occurs when [returned to console] is called.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.Logging.ChangeLogModel(System.String)">
            <summary>
            Optional means to model the logfile from its original "logfile" model.
            </summary>
            <param name="modelName"></param>
            <returns>The path for the logfile.</returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.Logging.WriteLog(System.String,Cartheur.Animals.Utilities.Logging.LogType,Cartheur.Animals.Utilities.Logging.LogCaller)">
            <summary>
            Logs a message sent from the calling application to a file.
            </summary>
            <param name="message">The message to log. Space between the message and log type enumeration provided.</param>
            <param name="logType">Type of the log.</param>
            <param name="caller">The class creating the log entry.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.Logging.RecordTranscript(System.String,System.Int32,System.Boolean)">
            <summary>
            Records a transcript of the conversation.
            </summary>
            <param name="message">The message to save in transcript format.</param>
            <param name="insertNewLine">Inserts a new line, if required.</param>
            <param name="fileNumber">Use for saving iterative transcript files.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.Logging.RecordTranscript(System.String)">
            <summary>
            Records a transcript of the conversation.
            </summary>
            <param name="message">The message to save in transcript format.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.Logging.SaveLastResult(System.Text.StringBuilder)">
            <summary>
            Saves the last result to support analysis of the algorithm.
            </summary>
            <param name="output">The output from the conversation.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.Logging.SaveLastResultToStorage(System.Text.StringBuilder)">
            <summary>
            Saves the last result to support analysis of the algorithm to storage.
            </summary>
            <param name="output">The output from the conversation.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.Logging.Debug(System.Object[])">
            <summary>
            Writes a debug log with object parameters.
            </summary>
            <param name="objects">The objects.</param>
        </member>
        <member name="T:Cartheur.Animals.Utilities.SerializeDictionary`2">
            <summary>
            Represents an xml serializable collection of keys and values.
            </summary>
            <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
        </member>
        <member name="F:Cartheur.Animals.Utilities.SerializeDictionary`2.DefaultItemTag">
            <summary>
            The default XML tag name for an item.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.SerializeDictionary`2.DefaultKeyTag">
            <summary>
            The default XML tag name for a key.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.SerializeDictionary`2.DefaultValueTag">
            <summary>
            The default XML tag name for a value.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.SerializeDictionary`2.KeySerializer">
            <summary>
            The XML serializer for the key type.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.SerializeDictionary`2.ValueSerializer">
            <summary>
            The XML serializer for the value type.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SerializeDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the
            <see cref="T:Cartheur.Animals.Utilities.SerializeDictionary`2"/> class.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SerializeDictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Cartheur.Animals.Utilities.SerializeDictionary`2" /> class.
            </summary>
            <param name="info">A
            <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object
            containing the information required to serialize the
            <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
            <param name="context">A
            <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure
            containing the source and destination of the serialized stream
            associated with the
            <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
        </member>
        <member name="P:Cartheur.Animals.Utilities.SerializeDictionary`2.ItemTagName">
            <summary>
            Gets the XML tag name for an item.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.SerializeDictionary`2.KeyTagName">
            <summary>
            Gets the XML tag name for a key.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.SerializeDictionary`2.ValueTagName">
            <summary>
            Gets the XML tag name for a value.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SerializeDictionary`2.GetSchema">
            <summary>
            Gets the XML schema for the XML serialization.
            </summary>
            <returns>An XML schema for the serialized object.</returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SerializeDictionary`2.ReadXml(System.Xml.XmlReader)">
            <summary>
            Deserializes the object from XML.
            </summary>
            <param name="reader">The XML representation of the object.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SerializeDictionary`2.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Serializes this instance to XML.
            </summary>
            <param name="writer">The XML writer to serialize to.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SerializeDictionary`2.ReadItem(System.Xml.XmlReader)">
            <summary>
            Deserializes the dictionary item.
            </summary>
            <param name="reader">The XML representation of the object.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SerializeDictionary`2.ReadKey(System.Xml.XmlReader)">
            <summary>
            Deserializes the dictionary item's key.
            </summary>
            <param name="reader">The XML representation of the object.</param>
            <returns>The dictionary item's key.</returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SerializeDictionary`2.ReadValue(System.Xml.XmlReader)">
            <summary>
            Deserializes the dictionary item's value.
            </summary>
            <param name="reader">The XML representation of the object.</param>
            <returns>The dictionary item's value.</returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SerializeDictionary`2.WriteItem(System.Xml.XmlWriter,System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Serializes the dictionary item.
            </summary>
            <param name="writer">The XML writer to serialize to.</param>
            <param name="keyValuePair">The key/value pair.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SerializeDictionary`2.WriteKey(System.Xml.XmlWriter,`0)">
            <summary>
            Serializes the dictionary item's key.
            </summary>
            <param name="writer">The XML writer to serialize to.</param>
            <param name="key">The dictionary item's key.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SerializeDictionary`2.WriteValue(System.Xml.XmlWriter,`1)">
            <summary>
            Serializes the dictionary item's value.
            </summary>
            <param name="writer">The XML writer to serialize to.</param>
            <param name="value">The dictionary item's value.</param>
        </member>
        <member name="T:Cartheur.Animals.Utilities.SerializeHashtable">
            <summary>
            The serial hashtable class.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SerializeHashtable.ReadXml(System.Xml.XmlReader)">
            <summary>
            Generates an object from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SerializeHashtable.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts an object into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SerializeHashtable.SaveXml(System.Collections.Hashtable,System.String)">
            <summary>
            Saves the Xml hash to a file.
            </summary>
            <param name="hash">The hash.</param>
            <param name="filename">The filename.</param>
        </member>
        <member name="T:Cartheur.Animals.Utilities.SharedFunctions">
            <summary>
            A static class containing commonly-used (shared) functions.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.SharedFunctions.ApplicationVersion">
            <summary>
            The application version information.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.SharedFunctions.PathDebugFolder">
            <summary>
            The path to the debug folder.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.SharedFunctions.PathReleaseFolder">
            <summary>
            The path to the release folder.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.SharedFunctions.ThisAeon">
            <summary>
            Gets or sets the aeon.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SharedFunctions.LoadDictionaries(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Utilities.LoaderPaths)">
            <summary>
            Loads the dictionaries.
            </summary>
            <param name="thisAeon">The this aeon.</param>
            <param name="configuration">The active configuration.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SharedFunctions.LoadPersonality(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Utilities.LoaderPaths)">
            <summary>
            Loads the personality by aeon's name.
            </summary>
            <param name="thisAeon">The this aeon.</param>
            <param name="configuration">The active configuration.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.SharedFunctions.LoadBlank(Cartheur.Animals.Core.Aeon,Cartheur.Animals.Utilities.LoaderPaths)">
            <summary>
            Loads a blank robot.
            </summary>
            <param name="thisAeon"></param>
            <param name="configuration"></param>
            <returns></returns>
        </member>
        <member name="T:Cartheur.Animals.Utilities.StaticRandom">
            <summary>
            Thread-safe equivalent of System.Random using static methods.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.StaticRandom.Next">
            <summary>
            Returns a nonnegative random number. 
            </summary>		
            <returns>A 32-bit signed integer greater than or equal to zero and less than Int32.MaxValue.</returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.StaticRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less than the specified maximum. 
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less than maxValue; that is, the range of return values includes zero but not maxValue.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If maxValue is less than zero.</exception>
        </member>
        <member name="M:Cartheur.Animals.Utilities.StaticRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range. 
            </summary>
            <param name="min">The inclusive lower bound of the random number returned. </param>
            <param name="max">
            The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue.
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to minValue and less than maxValue; that is, the range of return values includes minValue but not maxValue. If minValue equals maxValue, minValue is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If minValue is greater than maxValue.</exception>
        </member>
        <member name="M:Cartheur.Animals.Utilities.StaticRandom.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A double-precision floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.StaticRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes containing random numbers.</param>
            <exception cref="T:System.ArgumentNullException">If buffer is null.</exception>
        </member>
        <member name="T:Cartheur.Animals.Utilities.TagHandler">
            <summary>
            Encapsulates information about a custom tag class.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.TagHandler.AssemblyName">
            <summary>
            The assembly this class is found in.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.TagHandler.ClassName">
            <summary>
            The class name for the assembly.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.TagHandler.TagName">
            <summary>
            The name of the tag.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.TagHandler.Instantiate(System.Collections.Generic.Dictionary{System.String,System.Reflection.Assembly})">
            <summary>
            Provides an instantiation of the class represented by this tag handler.
            </summary>
            <param name="assemblies">All the assemblies the bot knows about.</param>
            <returns>The instantiated class.</returns>
        </member>
        <member name="T:Cartheur.Animals.Utilities.TextTransformer">
            <summary>
            Encapsulates all the required methods and attributes for any text transformation. An input string is provided and various methods and attributes can be used to grab a transformed string. The protected ProcessChange() method is abstract and should be overridden to contain the code for transforming the input text into the output text.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.TextTransformer._inputString">
            <summary>
            Instance of the input string.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.Utilities.TextTransformer.ThisAeon">
            <summary>
            The aeon that this transformation is connected with.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.TextTransformer.InputString">
            <summary>
            The input string to be transformed.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.TextTransformer.OutputString">
            <summary>
            The transformed string.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.TextTransformer.#ctor(Cartheur.Animals.Core.Aeon,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Utilities.TextTransformer"/> class.
            </summary>
            <param name="aeon">The aeon is this transformer a part of.</param>
            <param name="inputString">The input string to be transformed.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.TextTransformer.#ctor(Cartheur.Animals.Core.Aeon)">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Utilities.TextTransformer"/> class.
            </summary>
            <param name="aeon">The aeon this transformer is a part of.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.TextTransformer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cartheur.Animals.Utilities.TextTransformer"/> class. Used as part of late-binding mechanism.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.TextTransformer.Transform(System.String)">
            <summary>
            Do a transformation on the supplied input string.
            </summary>
            <param name="input">The string to be transformed.</param>
            <returns>The resulting output.</returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.TextTransformer.Transform">
            <summary>
            Do a transformation on the string found in the InputString attribute.
            </summary>
            <returns>The resulting transformed string.</returns>
        </member>
        <member name="M:Cartheur.Animals.Utilities.TextTransformer.ProcessChange">
            <summary>
            The method that does the actual processing of the text.
            </summary>
            <returns>The resulting processed text.</returns>
        </member>
        <member name="T:Cartheur.Animals.Utilities.GPIOPinDriver.Pin">
            <summary>
            The set of chip GPIO pins.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Utilities.GPIOPinDriver.GPIODirection">
            <summary>
            Direction of the GPIO Pin
            </summary>
        </member>
        <member name="T:Cartheur.Animals.Utilities.GPIOPinDriver.GPIOState">
            <summary>
            The value (High or Low) of a GPIO pin.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.GPIOPinDriver.#ctor(Cartheur.Animals.Utilities.GPIOPinDriver.Pin)">
            <summary>
            Sets up an interface for accessing the specified GPIO pin with direction set to OUT and initial value to LOW.
            </summary>
            <param name="gpioPin">The GPIO pin to be accessed</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.GPIOPinDriver.#ctor(Cartheur.Animals.Utilities.GPIOPinDriver.Pin,Cartheur.Animals.Utilities.GPIOPinDriver.GPIODirection)">
            <summary>
            Sets up an interface for accessing the specified GPIO pin with the given direction and initial value set to LOW.
            </summary>
            <param name="gpioPin">The GPIO pin to be accessed.</param>
            <param name="direction">The direction the GPIO pin should have.</param>
        </member>
        <member name="M:Cartheur.Animals.Utilities.GPIOPinDriver.#ctor(Cartheur.Animals.Utilities.GPIOPinDriver.Pin,Cartheur.Animals.Utilities.GPIOPinDriver.GPIODirection,Cartheur.Animals.Utilities.GPIOPinDriver.GPIOState)">
            <summary>
            Sets up an interface for accessing the specified GPIO pin with the given direction and given initial value.
            </summary>
            <param name="gpioPin">The GPIO pin to be accessed.</param>
            <param name="direction">The direction the GPIO pin should have.</param>
            <param name="initialValue">The initial value the GPIO pin should have.</param>
        </member>
        <member name="P:Cartheur.Animals.Utilities.GPIOPinDriver.GPIOPin">
            <summary>
            Gets the GPIO pin number.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.GPIOPinDriver.Direction">
            <summary>
            Gets or sets the direction of of an output GPIO pin.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.Utilities.GPIOPinDriver.State">
            <summary>
            The current value of a GPIO pin.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Utilities.GPIOPinDriver.Unexport">
            <summary>
            Unexports the GPIO interface.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.FileLogic.Category">
            <summary>
            The category storage object.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.FileLogic.Category.CategoryID">
            <summary>
            Gets or sets the category identifier.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.FileLogic.Category.CategoryName">
            <summary>
            Gets or sets the name of the category.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.FileLogic.CategoryList">
            <summary>
            The category list storage object.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.CategoryList.GetCategory(System.String)">
            <summary>
            Gets the category.
            </summary>
            <param name="categoryID">The category identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.CategoryList.GetCategoryList(System.String)">
            <summary>
            Gets the category list.
            </summary>
            <param name="filepath">The filepath.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.CategoryList.UpdateCategory(Cartheur.Animals.FileLogic.Category)">
            <summary>
            Updates the category.
            </summary>
            <param name="cat">The cat.</param>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.CategoryList.InsertCategory(Cartheur.Animals.FileLogic.Category)">
            <summary>
            Inserts the category.
            </summary>
            <param name="cat">The cat.</param>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.CategoryList.DeleteCategory(System.String)">
            <summary>
            Deletes the category.
            </summary>
            <param name="categoryID">The category identifier.</param>
        </member>
        <member name="T:Cartheur.Animals.FileLogic.Command">
            <summary>
            The command storage object.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.FileLogic.Command.CommandID">
            <summary>
            Gets or sets the command identifier.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.FileLogic.Command.CommandName">
            <summary>
            Gets or sets the name of the command.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.FileLogic.CommandList">
            <summary>
            The command list storage object.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.CommandList.GetCommand(System.String)">
            <summary>
            Gets the command.
            </summary>
            <param name="commandID">The command identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.CommandList.GetCommandList(System.String)">
            <summary>
            Gets the command list.
            </summary>
            <param name="filepath">The filepath.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.CommandList.UpdateCommand(Cartheur.Animals.FileLogic.Command)">
            <summary>
            Updates the command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.CommandList.InsertCommand(Cartheur.Animals.FileLogic.Command)">
            <summary>
            Inserts the command.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.CommandList.DeleteCommand(System.String)">
            <summary>
            Deletes the command.
            </summary>
            <param name="commandID">The command identifier.</param>
        </member>
        <member name="T:Cartheur.Animals.FileLogic.FileTemplate">
            <summary>
            A static class for writing new files to the aeon's working memory.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.FileLogic.FileTemplate.PatternText">
            <summary>
            Gets or sets the pattern text.
            </summary>
        </member>
        <member name="P:Cartheur.Animals.FileLogic.FileTemplate.TemplateText">
            <summary>
            Gets or sets the template text.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.FileLogic.FileTemplate.FileTemplateBlank">
            <summary>
            The XMS file template blank
            </summary>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.FileTemplate.CreateFileTemplate">
            <summary>
            Creates the XMS template.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.FileTemplate.WriteNuFile(System.String,System.String)">
            <summary>
            Writes a nufile to data storage.
            </summary>
            <param name="filename">The name of the nufile. If empty, then will use the xms filename field.</param>
            <param name="group">The thematic group of the addition. (Experimental)</param>
            <returns>True if successful.</returns>
        </member>
        <member name="T:Cartheur.Animals.FileLogic.XmlCategory">
            <summary>
            The xml category storage object.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.XmlCategory.Save(System.String)">
            <summary>
            Saves the specified filepath.
            </summary>
            <param name="filepath">The filepath.</param>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.XmlCategory.Insert(System.String,System.String)">
            <summary>
            Inserts the specified category identifier.
            </summary>
            <param name="categoryID">The category identifier.</param>
            <param name="categoryName">Name of the category.</param>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.XmlCategory.Update(System.String,System.String)">
            <summary>
            Updates the specified category identifier.
            </summary>
            <param name="categoryID">The category identifier.</param>
            <param name="categoryName">Name of the category.</param>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.XmlCategory.Delete(System.String)">
            <summary>
            Deletes the specified category identifier.
            </summary>
            <param name="categoryID">The category identifier.</param>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.XmlCategory.Select(System.String)">
            <summary>
            Selects the specified category identifier.
            </summary>
            <param name="categoryID">The category identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.XmlCategory.SelectAll(System.String)">
            <summary>
            Selects all data views.
            </summary>
            <param name="filepath">The filepath.</param>
            <returns></returns>
        </member>
        <member name="T:Cartheur.Animals.FileLogic.XmsFileType">
            <summary>
            The xms file type.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.FileLogic.XmsFileType.Category">
            <summary>
            The category file type.
            </summary>
        </member>
        <member name="F:Cartheur.Animals.FileLogic.XmsFileType.Command">
            <summary>
            The command file type.
            </summary>
        </member>
        <member name="T:Cartheur.Animals.FileLogic.XmlCommand">
            <summary>
            The xml command storage object.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.XmlCommand.Save(System.String,Cartheur.Animals.FileLogic.XmsFileType)">
            <summary>
            Saves the specified file at the path.
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="fileType">Type of the file.</param>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.XmlCommand.Insert(System.String,System.String,Cartheur.Animals.FileLogic.XmsFileType)">
            <summary>
            Inserts the specified category identifier.
            </summary>
            <param name="categoryID">The category identifier.</param>
            <param name="categoryName">Name of the category.</param>
            <param name="fileType">Type of the file.</param>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.XmlCommand.Update(System.String,System.String,Cartheur.Animals.FileLogic.XmsFileType)">
            <summary>
            Updates the specified category identifier.
            </summary>
            <param name="categoryID">The category identifier.</param>
            <param name="categoryName">Name of the category.</param>
            <param name="fileType">Type of the file.</param>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.XmlCommand.Delete(System.String,Cartheur.Animals.FileLogic.XmsFileType)">
            <summary>
            Deletes the specified category identifier.
            </summary>
            <param name="categoryID">The category identifier.</param>
            <param name="fileType">Type of the file.</param>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.XmlCommand.Select(System.String)">
            <summary>
            Selects the specified category identifier.
            </summary>
            <param name="categoryID">The category identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Cartheur.Animals.FileLogic.XmlCommand.SelectAll(System.String,Cartheur.Animals.FileLogic.XmsFileType)">
            <summary>
            Selects all data views.
            </summary>
            <param name="filepath">The filepath.</param>
            <param name="fileType">Type of the file.</param>
            <returns></returns>
        </member>
        <member name="T:Cartheur.Animals.Control.Gpio">
            <summary>
            Class managing the external GPIO hardware.
            </summary>
        </member>
        <member name="M:Cartheur.Animals.Control.Gpio.RunPythonScript(System.String,Cartheur.Animals.Utilities.LoaderPaths)">
            <summary>
            Runs a python script.
            </summary>
            <returns><c>true</c>, if python script was run, <c>false</c> otherwise.</returns>
            <param name="file">The file to run.</param>
            <param name="configuration">The runtime configuration.</param>
        </member>
        <member name="M:Cartheur.Animals.Control.Gpio.RunPythonScript(System.String,System.String,Cartheur.Animals.Utilities.LoaderPaths)">
            <summary>
            Runs a python script.
            </summary>
            <returns><c>true</c>, if python script was run, <c>false</c> otherwise.</returns>
            <param name="file">The file to run.</param>
            <param name="parameter">The parameter to pass.</param>
            <param name="configuration">The runtime configuration.</param>
        </member>
    </members>
</doc>
